d G "INT_RB7" 1 738 "0x1800B08"
D G "__PCM__" 0 184 ""5.007""
D G "__DEVICE__" 0 184 "886"
D G "__DATE__" 0 184 ""11-may.-18""
D G "__TIME__" 0 184 ""00:41:34"" "Standard Header file for the PIC16F886 device ////////////////"
c L "set_tris_a" 1 5 15 "FUNCTION"
v L "value" 1 30 "int8" `54 
f B "set_tris_a" 1 30 "void(int8 value)" `53 
v L "value" 1 31 "int8" `56 
f B "set_tris_b" 1 31 "void(int8 value)" `55 
v L "value" 1 32 "int8" `58 
f B "set_tris_c" 1 32 "void(int8 value)" `57 
v L "value" 1 33 "int8" `60 
f B "set_tris_e" 1 33 "void(int8 value)" `59 
f B "get_tris_a" 1 34 "int8()" `61 
f B "get_tris_b" 1 35 "int8()" `62 
f B "get_tris_c" 1 36 "int8()" `63 
f B "get_tris_e" 1 37 "int8()" `64 
v L "value" 1 38 "int8" `66 
f B "output_a" 1 38 "void(int8 value)" `65 
v L "value" 1 39 "int8" `68 
f B "output_b" 1 39 "void(int8 value)" `67 
v L "value" 1 40 "int8" `70 
f B "output_c" 1 40 "void(int8 value)" `69 
v L "value" 1 41 "int8" `72 
f B "output_e" 1 41 "void(int8 value)" `71 
f B "input_a" 1 42 "int8()" `73 
f B "input_b" 1 43 "int8()" `74 
f B "input_c" 1 44 "int8()" `75 
f B "input_e" 1 45 "int8()" `76 
f B "input_change_a" 1 46 "int8()" `77 
f B "input_change_b" 1 47 "int8()" `78 
f B "input_change_c" 1 48 "int8()" `79 
f B "input_change_e" 1 49 "int8()" `80 
v L "pin" 1 50 "int16" `82 
f B "input" 1 50 "int8(int16 pin)" `81 
v L "pin" 1 51 "int16" `84 
f B "input_state" 1 51 "int8(int16 pin)" `83 
v L "pin" 1 52 "int16" `86 
f B "output_low" 1 52 "void(int16 pin)" `85 
v L "pin" 1 53 "int16" `88 
f B "output_high" 1 53 "void(int16 pin)" `87 
v L "pin" 1 54 "int16" `90 
f B "output_toggle" 1 54 "void(int16 pin)" `89 
v L "pin" 1 55 "int16" `92 
v L "level" 1 55 "int8" `93 
f B "output_bit" 1 55 "void(int16 pin,int8 level)" `91 
v L "pin" 1 56 "int16" `95 
f B "output_float" 1 56 "void(int16 pin)" `94 
v L "pin" 1 57 "int16" `97 
f B "output_drive" 1 57 "void(int16 pin)" `96  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 61 "40"
d G "PIN_A1" 1 62 "41"
d G "PIN_A2" 1 63 "42"
d G "PIN_A3" 1 64 "43"
d G "PIN_A4" 1 65 "44"
d G "PIN_A5" 1 66 "45"
d G "PIN_A6" 1 67 "46"
d G "PIN_A7" 1 68 "47"
d G "PIN_B0" 1 70 "48"
d G "PIN_B1" 1 71 "49"
d G "PIN_B2" 1 72 "50"
d G "PIN_B3" 1 73 "51"
d G "PIN_B4" 1 74 "52"
d G "PIN_B5" 1 75 "53"
d G "PIN_B6" 1 76 "54"
d G "PIN_B7" 1 77 "55"
d G "PIN_C0" 1 79 "56"
d G "PIN_C1" 1 80 "57"
d G "PIN_C2" 1 81 "58"
d G "PIN_C3" 1 82 "59"
d G "PIN_C4" 1 83 "60"
d G "PIN_C5" 1 84 "61"
d G "PIN_C6" 1 85 "62"
d G "PIN_C7" 1 86 "63"
d G "PIN_E3" 1 88 "75"
d G "FALSE" 1 91 "0"
d G "TRUE" 1 92 "1"
d G "BYTE" 1 94 "int8"
d G "BOOLEAN" 1 95 "int1"
d G "getc" 1 97 "getch"
d G "fgetc" 1 98 "getch"
d G "getchar" 1 99 "getch"
d G "putc" 1 100 "putchar"
d G "fputc" 1 101 "putchar"
d G "fgets" 1 102 "gets"
d G "fputs" 1 103 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 108 "int8()" `98 
f B "reset_cpu" 1 109 "void()" `99 
f B "sleep" 1 110 "void()" `100  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 112 "3"
d G "WDT_TIMEOUT" 1 113 "11"
d G "MCLR_FROM_SLEEP" 1 114 "19"
d G "MCLR_FROM_RUN" 1 115 "27"
d G "NORMAL_POWER_UP" 1 116 "25"
d G "BROWNOUT_RESTART" 1 117 "26"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 124 "int8" `102 
f B "setup_timer_0" 1 124 "void(int8 mode)" `101 
v L "value" 1 125 "int8" `104 
f B "set_timer0" 1 125 "void(int8 value)" `103 
f B "get_timer0" 1 126 "int8()" `105 
v L "mode" 1 127 "int8" `107 
v L "prescaler" 1 127 "int8" `108 
f B "setup_counters" 1 127 "void(int8 mode,int8 prescaler)" `106 
v L "value" 1 128 "int8" `110 
f B "set_rtcc" 1 128 "void(int8 value)" `109 
f B "get_rtcc" 1 129 "int8()" `111  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 131 "0"
d G "T0_EXT_L_TO_H" 1 132 "32"
d G "T0_EXT_H_TO_L" 1 133 "48"
d G "T0_DIV_1" 1 135 "8"
d G "T0_DIV_2" 1 136 "0"
d G "T0_DIV_4" 1 137 "1"
d G "T0_DIV_8" 1 138 "2"
d G "T0_DIV_16" 1 139 "3"
d G "T0_DIV_32" 1 140 "4"
d G "T0_DIV_64" 1 141 "5"
d G "T0_DIV_128" 1 142 "6"
d G "T0_DIV_256" 1 143 "7"
d G "T0_8_BIT" 1 146 "0"
d G "RTCC_INTERNAL" 1 148 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 149 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 150 "48"
d G "RTCC_DIV_1" 1 151 "8"
d G "RTCC_DIV_2" 1 152 "0"
d G "RTCC_DIV_4" 1 153 "1"
d G "RTCC_DIV_8" 1 154 "2"
d G "RTCC_DIV_16" 1 155 "3"
d G "RTCC_DIV_32" 1 156 "4"
d G "RTCC_DIV_64" 1 157 "5"
d G "RTCC_DIV_128" 1 158 "6"
d G "RTCC_DIV_256" 1 159 "7"
d G "RTCC_8_BIT" 1 160 "0"
c L "get_rtcc" 1 5 8 "FUNCTION"
v L "mode" 1 171 "int16" `113 
f B "setup_wdt" 1 171 "void(int16 mode)" `112 
f B "restart_wdt" 1 172 "void()" `114  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 175 "8"
d G "WDT_36MS" 1 176 "9"
d G "WDT_72MS" 1 177 "10"
d G "WDT_144MS" 1 178 "11"
d G "WDT_288MS" 1 179 "12"
d G "WDT_576MS" 1 180 "13"
d G "WDT_1152MS" 1 181 "14"
d G "WDT_2304MS" 1 182 "15"
d G "WDT_ON" 1 187 "0x4000"
d G "WDT_OFF" 1 188 "0"
d G "WDT_DIV_16" 1 189 "0x100"
d G "WDT_DIV_8" 1 190 "0x300"
d G "WDT_DIV_4" 1 191 "0x500"
d G "WDT_DIV_2" 1 192 "0x700"
d G "WDT_TIMES_1" 1 193 "0x900" "Default"
d G "WDT_TIMES_2" 1 194 "0xB00"
d G "WDT_TIMES_4" 1 195 "0xD00"
d G "WDT_TIMES_8" 1 196 "0xF00"
d G "WDT_TIMES_16" 1 197 "0x1100"
d G "WDT_TIMES_32" 1 198 "0x1300"
d G "WDT_TIMES_64" 1 199 "0x1500"
d G "WDT_TIMES_128" 1 200 "0x1700"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 205 "int16" `116 
f B "setup_timer_1" 1 205 "void(int16 mode)" `115 
f B "get_timer1" 1 206 "int16()" `117 
v L "value" 1 207 "int16" `119 
f B "set_timer1" 1 207 "void(int16 value)" `118  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 210 "0"
d G "T1_INTERNAL" 1 211 "5"
d G "T1_EXTERNAL" 1 212 "7"
d G "T1_EXTERNAL_SYNC" 1 213 "3"
d G "T1_CLK_OUT" 1 215 "8"
d G "T1_DIV_BY_1" 1 217 "0"
d G "T1_DIV_BY_2" 1 218 "0x10"
d G "T1_DIV_BY_4" 1 219 "0x20"
d G "T1_DIV_BY_8" 1 220 "0x30"
d G "T1_GATE" 1 222 "0x40"
d G "T1_GATE_INVERTED" 1 223 "0xC0"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 228 "int8" `121 
v L "period" 1 228 "int8" `122 
v L "postscale" 1 228 "int8" `123 
f B "setup_timer_2" 1 228 "void(int8 mode,int8 period,int8 postscale)" `120 
f B "get_timer2" 1 229 "int8()" `124 
v L "value" 1 230 "int8" `126 
f B "set_timer2" 1 230 "void(int8 value)" `125  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 232 "0"
d G "T2_DIV_BY_1" 1 233 "4"
d G "T2_DIV_BY_4" 1 234 "5"
d G "T2_DIV_BY_16" 1 235 "6"
c L "set_timer2" 1 5 4 "FUNCTION"
v L "mode" 1 241 "int32" `128 
f B "setup_ccp1" 1 241 "void(int32 mode)" `127 
v L "mode" 1 242 "int32" `130 
v L "pwm" 1 242 "int8" `131 
f G "setup_ccp1" 1 242 "void(int32 mode,int8 pwm)" `129 
v L "value" 1 243 "int16" `133 
f B "set_pwm1_duty" 1 243 "void(int16 value)" `132  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 245 "0"
d G "CCP_CAPTURE_FE" 1 246 "4"
d G "CCP_CAPTURE_RE" 1 247 "5"
d G "CCP_CAPTURE_DIV_4" 1 248 "6"
d G "CCP_CAPTURE_DIV_16" 1 249 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 250 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 251 "9"
d G "CCP_COMPARE_INT" 1 252 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 253 "0xB"
d G "CCP_PWM" 1 254 "0xC"
d G "CCP_PWM_PLUS_1" 1 255 "0x1c"
d G "CCP_PWM_PLUS_2" 1 256 "0x2c"
d G "CCP_PWM_PLUS_3" 1 257 "0x3c"
d G "CCP_PWM_H_H" 1 262 "0x0c"
d G "CCP_PWM_H_L" 1 263 "0x0d"
d G "CCP_PWM_L_H" 1 264 "0x0e"
d G "CCP_PWM_L_L" 1 265 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 267 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 268 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 269 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 271 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 272 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 273 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 274 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 275 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 276 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 277 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 279 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 280 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 281 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 283 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 284 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 285 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 287 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 289 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 290 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 291 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 292 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 293 "0x10000000"
c L "set_pwm1_duty" 1 5 1 "FUNCTION"
v L "mode" 1 297 "int32" `138 
f B "setup_ccp2" 1 297 "void(int32 mode)" `137 
v L "mode" 1 298 "int32" `140 
v L "pwm" 1 298 "int8" `141 
f G "setup_ccp2" 1 298 "void(int32 mode,int8 pwm)" `139 
v L "value" 1 299 "int16" `143 
f B "set_pwm2_duty" 1 299 "void(int16 value)" `142 
c L "set_pwm2_duty" 1 5 3 "FUNCTION"
v L "mode" 1 306 "int32" `148 
f B "setup_spi" 1 306 "void(int32 mode)" `147 
v L "value" 1 307 "int8" `150 
f B "spi_write" 1 307 "void(int8 value)" `149 
f B "spi_read" 1 308 "int8()" `151 
v L "value" 1 309 "int8" `153 
f G "spi_read" 1 309 "int8(int8 value)" `152 
f B "spi_data_in" 1 310 "int8()" `154  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 312 "0x00"
d G "SPI_MASTER" 1 313 "0x20"
d G "SPI_SLAVE" 1 314 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 315 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 316 "0x00"
d G "SPI_CLK_DIV_4" 1 317 "0x00"
d G "SPI_CLK_DIV_16" 1 318 "0x01"
d G "SPI_CLK_DIV_64" 1 319 "0x02"
d G "SPI_CLK_T2" 1 320 "0x03"
d G "SPI_SS_DISABLED" 1 321 "0x01"
d G "SPI_XMIT_L_TO_H" 1 323 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 324 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 326 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 327 "0x8000"
d G "SPI_L_TO_H" 1 330 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 331 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 5 2 "FUNCTION"
v L "baud" 1 335 "int32" `156 
f B "setup_uart" 1 335 "void(int32 baud)" `155 
v L "baud" 1 336 "int32" `158 
v L "stream" 1 336 "int8" `159 
f G "setup_uart" 1 336 "void(int32 baud,int8 stream)" `157 
v L "baud" 1 337 "int32" `161 
v L "stream" 1 337 "int8" `162 
v L "clock" 1 337 "int32" `163 
f G "setup_uart" 1 337 "void(int32 baud,int8 stream,int32 clock)" `160 
v L "baud" 1 338 "int32" `165 
f B "set_uart_speed" 1 338 "void(int32 baud)" `164 
v L "baud" 1 339 "int32" `167 
v L "stream" 1 339 "int8" `168 
f G "set_uart_speed" 1 339 "void(int32 baud,int8 stream)" `166 
v L "baud" 1 340 "int32" `170 
v L "stream" 1 340 "int8" `171 
v L "clock" 1 340 "int32" `172 
f G "set_uart_speed" 1 340 "void(int32 baud,int8 stream,int32 clock)" `169  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 344 "2"
d G "UART_DATA" 1 345 "4"
d G "UART_AUTODETECT" 1 346 "8"
d G "UART_AUTODETECT_NOWAIT" 1 347 "9"
d G "UART_WAKEUP_ON_RDA" 1 348 "10"
d G "UART_SEND_BREAK" 1 349 "13"
c L "set_uart_speed" 1 5 3 "FUNCTION"
v L "mode" 1 353 "int32" `174 
f B "setup_comparator" 1 353 "void(int32 mode)" `173  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 357 "0x00"
d G "NC_NC" 1 358 "0x00"
d G "CP1_A0_A3" 1 361 "0x00090080"
d G "CP1_A1_A3" 1 362 "0x000A0081"
d G "CP1_B3_A3" 1 363 "0x00880082"
d G "CP1_B1_A3" 1 364 "0x00280083"
d G "CP1_A0_VREF" 1 365 "0x00010084"
d G "CP1_A1_VREF" 1 366 "0x00020085"
d G "CP1_B3_VREF" 1 367 "0x00800086"
d G "CP1_B1_VREF" 1 368 "0x00200087"
d G "CP1_OUT_ON_A4" 1 370 "0x00000020"
d G "CP1_INVERT" 1 371 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 1 372 "0x20000000"
d G "CP2_A0_A2" 1 375 "0x00058000"
d G "CP2_A1_A2" 1 376 "0x00068100"
d G "CP2_B3_A2" 1 377 "0x00848200"
d G "CP2_B1_A2" 1 378 "0x00248300"
d G "CP2_A0_VREF" 1 379 "0x00018400"
d G "CP2_A1_VREF" 1 380 "0x00028500"
d G "CP2_B3_VREF" 1 381 "0x00808600"
d G "CP2_B1_VREF" 1 382 "0x00208700"
d G "CP2_OUT_ON_A5" 1 384 "0x00002000"
d G "CP2_INVERT" 1 385 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 1 386 "0x10000000"
d G "CP2_T1_SYNC" 1 389 "0x01000000"
d G "CP2_T1_GATE" 1 390 "0x02000000"
c L "setup_comparator" 1 5 2 "FUNCTION"
v L "mode" 1 398 "int8" `178 
f B "setup_vref" 1 398 "void(int8 mode)" `177  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 400 "0xa0"
d G "VREF_HIGH" 1 401 "0x80"
c L "setup_vref" 1 5 3 "FUNCTION"
v L "mode" 1 407 "int8" `180 
f B "setup_oscillator" 1 407 "int8(int8 mode)" `179  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 409 "1"
d G "OSC_125KHZ" 1 410 "0x11"
d G "OSC_250KHZ" 1 411 "0x21"
d G "OSC_500KHZ" 1 412 "0x31"
d G "OSC_1MHZ" 1 413 "0x41"
d G "OSC_2MHZ" 1 414 "0x51"
d G "OSC_4MHZ" 1 415 "0x61"
d G "OSC_8MHZ" 1 416 "0x71"
d G "OSC_INTRC" 1 417 "1"
d G "OSC_NORMAL" 1 418 "0"
d G "OSC_STATE_STABLE" 1 420 "4"
d G "OSC_31KHZ_STABLE" 1 421 "2"
c L "setup_oscillator" 1 5 4 "FUNCTION"
v L "mode" 1 429 "int16" `182 
f B "setup_adc" 1 429 "void(int16 mode)" `181 
f B "read_adc" 1 430 "int8()" `183 
v L "mode" 1 431 "int8" `185 
f G "read_adc" 1 431 "int8(int8 mode)" `184 
f G "read_adc" 1 432 "int16()" `186 
v L "mode" 1 433 "int8" `188 
f G "read_adc" 1 433 "int16(int8 mode)" `187 
f B "adc_done" 1 434 "int8()" `189  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 436 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 437 "0x100"
d G "ADC_CLOCK_DIV_8" 1 438 "0x40"
d G "ADC_CLOCK_DIV_32" 1 439 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 440 "0xc0" "Internal 2-6us"
c L "adc_done" 1 5 1 "FUNCTION"
v L "pins" 1 443 "int32" `191 
f B "setup_adc_ports" 1 443 "void(int32 pins)" `190 
v L "pins" 1 444 "int32" `193 
v L "reference" 1 444 "int32" `194 
f G "setup_adc_ports" 1 444 "void(int32 pins,int32 reference)" `192 
v L "channel" 1 445 "int8" `196 
f B "set_adc_channel" 1 445 "void(int8 channel)" `195  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 449 "1" "| A0"
d G "sAN1" 1 450 "2" "| A1"
d G "sAN2" 1 451 "4" "| A2"
d G "sAN3" 1 452 "8" "| A3"
d G "sAN4" 1 453 "16" "| A5"
d G "sAN5" 1 454 "32" "| E0"
d G "sAN6" 1 455 "64" "| E1"
d G "sAN7" 1 456 "128" "| E2"
d G "sAN8" 1 457 "0x10000" "| B2"
d G "sAN9" 1 458 "0x20000" "| B3"
d G "sAN10" 1 459 "0x40000" "| B1"
d G "sAN11" 1 460 "0x80000" "| B4"
d G "sAN12" 1 461 "0x100000" "| B0"
d G "sAN13" 1 462 "0x200000" "| B5"
d G "NO_ANALOGS" 1 463 "0" "None"
d G "ALL_ANALOG" 1 464 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 1 467 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 468 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 1 469 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 1 470 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 1 473 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 474 "1"
d G "ADC_READ_ONLY" 1 475 "6"
c L "set_adc_channel" 1 5 3 "FUNCTION"
v L "x" 1 481 "sint8" `198 
f B "abs" 1 481 "sint8(sint8 x)" `197 
v L "x" 1 482 "sint16" `200 
f G "abs" 1 482 "sint16(sint16 x)" `199 
v L "x" 1 483 "sint32" `202 
f G "abs" 1 483 "sint32(sint32 x)" `201 
v L "x" 1 484 "float" `204 
f G "abs" 1 484 "float(float x)" `203 
v L "??65535" 1 485 "int8" `206 
v L "??65535" 1 485 "int8" `207 
f B "_mul" 1 485 "int16(int8 ,int8 )" `205 
v L "??65535" 1 486 "sint8" `206 
v L "??65535" 1 486 "sint8" `210 
f G "_mul" 1 486 "sint16(sint8 ,sint8 )" `208 
v L "??65535" 1 487 "int16" `206 
v L "??65535" 1 487 "int16" `213 
f G "_mul" 1 487 "int32(int16 ,int16 )" `211 
v L "??65535" 1 488 "sint16" `206 
v L "??65535" 1 488 "sint16" `216 
f G "_mul" 1 488 "sint32(sint16 ,sint16 )" `214  "Memory Manipulation Prototypes:"
v L "bank" 1 491 "int8" `218 
v L "offset" 1 491 "int8" `219 
f B "read_bank" 1 491 "int8(int8 bank,int8 offset)" `217 
v L "bank" 1 492 "int8" `221 
v L "offset" 1 492 "int8" `222 
v L "value" 1 492 "int8" `223 
f B "write_bank" 1 492 "void(int8 bank,int8 offset,int8 value)" `220 
v L "dest" 1 493 "*int8" `225 
v L "src" 1 493 "*int8" `226 
f B "strcpy" 1 493 "void(*int8 dest,*int8 src)" `224 
v L "dest" 1 494 "*int8" `228 
v L "src" 1 494 "*int8" `229 
f B "strcopy" 1 494 "void(*int8 dest,*int8 src)" `227 
v L "destination" 1 495 "*int8" `231 
v L "value" 1 495 "int8" `232 
v L "num" 1 495 "int16" `233 
f B "memset" 1 495 "void(*int8 destination,int8 value,int16 num)" `230 
v L "destination" 1 496 "*int8" `235 
v L "source" 1 496 "*int8" `236 
v L "num" 1 496 "int16" `237 
f B "memcpy" 1 496 "void(*int8 destination,*int8 source,int16 num)" `234  "String Prototypes:"
v L "cvalue" 1 499 "int8" `239 
f B "toupper" 1 499 "int8(int8 cvalue)" `238 
v L "cvalue" 1 500 "int8" `241 
f B "tolower" 1 500 "int8(int8 cvalue)" `240 
v L "string" 1 501 "*int8" `243 
v L "cstring" 1 501 "*int8" `244 
f B "sprintf" 1 501 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `242  "Data Manipulators Prototypes:"
v L "address" 1 504 "*int8" `247 
v L "bytes" 1 504 "int8" `248 
v L "value" 1 504 "int8" `249 
f B "shift_left" 1 504 "int8(*int8 address,int8 bytes,int8 value)" `246 
v L "address" 1 505 "*int8" `251 
v L "bytes" 1 505 "int8" `252 
v L "value" 1 505 "int8" `253 
f B "shift_right" 1 505 "int8(*int8 address,int8 bytes,int8 value)" `250 
v L "address" 1 506 "*int8" `255 
v L "bytes" 1 506 "int8" `256 
f B "rotate_left" 1 506 "void(*int8 address,int8 bytes)" `254 
v L "address" 1 507 "*int8" `258 
v L "bytes" 1 507 "int8" `259 
f B "rotate_right" 1 507 "void(*int8 address,int8 bytes)" `257 
v L "value" 1 508 "int8" `261 
f B "swap" 1 508 "void(int8 value)" `260 
v L "var" 1 509 "int16" `263 
v L "offset" 1 509 "int8" `264 
f B "make8" 1 509 "int8(int16 var,int8 offset)" `262 
v L "var" 1 510 "int32" `263 
v L "offset" 1 510 "int8" `267 
f G "make8" 1 510 "int8(int32 var,int8 offset)" `265 
v L "varhigh" 1 511 "int8" `269 
v L "varlow" 1 511 "int8" `270 
f B "make16" 1 511 "int16(int8 varhigh,int8 varlow)" `268 
v L "var1" 1 512 "int16" `272 
f B "make32" 1 512 "int32(int16 var1)" `271 
v L "var1" 1 513 "int16" `274 
v L "var2" 1 513 "int16" `275 
f G "make32" 1 513 "int32(int16 var1,int16 var2)" `273 
v L "var1" 1 514 "int16" `274 
v L "var2" 1 514 "int8" `278 
f G "make32" 1 514 "int32(int16 var1,int8 var2)" `276 
v L "var1" 1 515 "int16" `280 
v L "var2" 1 515 "int8" `281 
v L "var3" 1 515 "int8" `282 
f G "make32" 1 515 "int32(int16 var1,int8 var2,int8 var3)" `279 
v L "var1" 1 516 "int8" `284 
f G "make32" 1 516 "int32(int8 var1)" `283 
v L "var1" 1 517 "int8" `274 
v L "var2" 1 517 "int8" `287 
f G "make32" 1 517 "int32(int8 var1,int8 var2)" `285 
v L "var1" 1 518 "int8" `280 
v L "var2" 1 518 "int8" `281 
v L "var3" 1 518 "int8" `291 
f G "make32" 1 518 "int32(int8 var1,int8 var2,int8 var3)" `288 
v L "var1" 1 519 "int8" `293 
v L "var2" 1 519 "int8" `294 
v L "var3" 1 519 "int8" `295 
v L "var4" 1 519 "int8" `296 
f G "make32" 1 519 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `292 
v L "var1" 1 520 "int8" `274 
v L "var2" 1 520 "int16" `299 
f G "make32" 1 520 "int32(int8 var1,int16 var2)" `297 
v L "var1" 1 521 "int8" `280 
v L "var2" 1 521 "int16" `281 
v L "var3" 1 521 "int8" `303 
f G "make32" 1 521 "int32(int8 var1,int16 var2,int8 var3)" `300 
v L "var1" 1 522 "int8" `280 
v L "var2" 1 522 "int8" `281 
v L "var3" 1 522 "int16" `307 
f G "make32" 1 522 "int32(int8 var1,int8 var2,int16 var3)" `304 
v L "var" 1 523 "int8" `309 
v L "bit" 1 523 "int8" `310 
f B "bit_set" 1 523 "void(int8 var,int8 bit)" `308 
v L "var" 1 524 "int16" `309 
v L "bit" 1 524 "int8" `313 
f G "bit_set" 1 524 "void(int16 var,int8 bit)" `311 
v L "var" 1 525 "int32" `309 
v L "bit" 1 525 "int8" `316 
f G "bit_set" 1 525 "void(int32 var,int8 bit)" `314 
v L "var" 1 526 "int8" `318 
v L "bit" 1 526 "int8" `319 
f B "bit_clear" 1 526 "void(int8 var,int8 bit)" `317 
v L "var" 1 527 "int16" `318 
v L "bit" 1 527 "int8" `322 
f G "bit_clear" 1 527 "void(int16 var,int8 bit)" `320 
v L "var" 1 528 "int32" `318 
v L "bit" 1 528 "int8" `325 
f G "bit_clear" 1 528 "void(int32 var,int8 bit)" `323 
v L "var" 1 529 "int8" `327 
v L "bit" 1 529 "int8" `328 
f B "bit_test" 1 529 "int8(int8 var,int8 bit)" `326 
v L "var" 1 530 "int16" `327 
v L "bit" 1 530 "int8" `331 
f G "bit_test" 1 530 "int8(int16 var,int8 bit)" `329 
v L "var" 1 531 "int32" `327 
v L "bit" 1 531 "int8" `334 
f G "bit_test" 1 531 "int8(int32 var,int8 bit)" `332  "#use delay() Prototypes:"
v L "count" 1 534 "int8" `336 
f B "delay_cycles" 1 534 "void(int8 count)" `335 
v L "time" 1 535 "int16" `338 
f B "delay_ms" 1 535 "void(int16 time)" `337 
v L "time" 1 536 "int16" `340 
f B "delay_us" 1 536 "void(int16 time)" `339  "#use rs232() Prototypes:"
v L "cdata" 1 539 "int8" `342 
f B "putchar" 1 539 "void(int8 cdata)" `341 
v L "cdata" 1 540 "int8" `344 
v L "stream" 1 540 "int8" `345 
f G "putchar" 1 540 "void(int8 cdata,int8 stream)" `343 
v L "string" 1 541 "*int8" `347 
f B "puts" 1 541 "void(*int8 string)" `346 
v L "string" 1 542 "*int8" `349 
v L "stream" 1 542 "int8" `350 
f G "puts" 1 542 "void(*int8 string,int8 stream)" `348 
f B "getch" 1 543 "int8()" `351 
v L "stream" 1 544 "int8" `353 
f G "getch" 1 544 "int8(int8 stream)" `352 
v L "string" 1 545 "*int8" `355 
f B "gets" 1 545 "void(*int8 string)" `354 
v L "string" 1 546 "*int8" `357 
v L "stream" 1 546 "int8" `358 
f G "gets" 1 546 "void(*int8 string,int8 stream)" `356 
f B "kbhit" 1 547 "int8()" `359 
v L "stream" 1 548 "int8" `361 
f G "kbhit" 1 548 "int8(int8 stream)" `360 
v L "string" 1 549 "*int8" `363 
f B "printf" 1 549 "void(*int8 string,*int8 _VA_LIST)" `362 
v L "stream" 1 550 "int8" `366 
v L "string" 1 550 "*int8" `367 
f B "fprintf" 1 550 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `365 
f B "putc_send" 1 551 "void()" `369 
v L "stream" 1 552 "int8" `371 
f B "fputc_send" 1 552 "void(int8 stream)" `370 
f B "rcv_buffer_full" 1 553 "int8()" `372 
v L "stream" 1 554 "int8" `374 
f G "rcv_buffer_full" 1 554 "int8(int8 stream)" `373 
f B "rcv_buffer_bytes" 1 555 "int16()" `375 
v L "stream" 1 556 "int8" `377 
f G "rcv_buffer_bytes" 1 556 "int16(int8 stream)" `376 
f B "tx_buffer_full" 1 557 "int8()" `378 
v L "stream" 1 558 "int8" `380 
f G "tx_buffer_full" 1 558 "int8(int8 stream)" `379 
f B "tx_buffer_bytes" 1 559 "int16()" `381 
v L "stream" 1 560 "int8" `383 
f G "tx_buffer_bytes" 1 560 "int16(int8 stream)" `382  "#use i2c() Prototypes:"
f B "i2c_read" 1 563 "int8()" `384 
v L "stream" 1 564 "int8" `386 
f G "i2c_read" 1 564 "int8(int8 stream)" `385 
v L "stream" 1 565 "int8" `388 
v L "ack" 1 565 "int8" `389 
f G "i2c_read" 1 565 "int8(int8 stream,int8 ack)" `387 
v L "data" 1 566 "int8" `391 
f B "i2c_write" 1 566 "int8(int8 data)" `390 
v L "stream" 1 567 "int8" `393 
v L "data" 1 567 "int8" `394 
f G "i2c_write" 1 567 "int8(int8 stream,int8 data)" `392 
f B "i2c_start" 1 568 "void()" `395 
v L "stream" 1 569 "int8" `397 
f G "i2c_start" 1 569 "void(int8 stream)" `396 
v L "stream" 1 570 "int8" `399 
v L "restart" 1 570 "int8" `400 
f G "i2c_start" 1 570 "void(int8 stream,int8 restart)" `398 
f B "i2c_stop" 1 571 "void()" `401 
v L "stream" 1 572 "int8" `403 
f G "i2c_stop" 1 572 "void(int8 stream)" `402 
f B "i2c_isr_state" 1 573 "int8()" `404 
v L "addr" 1 574 "int8" `406 
f B "i2c_slaveaddr" 1 574 "void(int8 addr)" `405 
v L "stream" 1 575 "int8" `408 
v L "addr" 1 575 "int8" `409 
f G "i2c_slaveaddr" 1 575 "void(int8 stream,int8 addr)" `407 
f B "i2c_poll" 1 576 "int8()" `410 
v L "stream" 1 577 "int8" `412 
f G "i2c_poll" 1 577 "int8(int8 stream)" `411 
v L "baud" 1 578 "int32" `414 
f B "i2c_init" 1 578 "void(int32 baud)" `413 
v L "stream" 1 579 "int8" `416 
v L "baud" 1 579 "int32" `417 
f G "i2c_init" 1 579 "void(int8 stream,int32 baud)" `415  "#use spi() Prototypes:"
f B "spi_xfer" 1 582 "int8()" `418 
f G "spi_xfer" 1 583 "int16()" `419 
f G "spi_xfer" 1 584 "int32()" `420 
v L "data" 1 585 "int8" `422 
f G "spi_xfer" 1 585 "int8(int8 data)" `421 
v L "data" 1 586 "int16" `424 
f G "spi_xfer" 1 586 "int16(int16 data)" `423 
v L "data" 1 587 "int32" `426 
f G "spi_xfer" 1 587 "int32(int32 data)" `425 
v L "stream" 1 588 "int8" `428 
v L "data" 1 588 "int8" `429 
f G "spi_xfer" 1 588 "int8(int8 stream,int8 data)" `427 
v L "stream" 1 589 "int8" `428 
v L "data" 1 589 "int16" `432 
f G "spi_xfer" 1 589 "int16(int8 stream,int16 data)" `430 
v L "stream" 1 590 "int8" `428 
v L "data" 1 590 "int32" `435 
f G "spi_xfer" 1 590 "int32(int8 stream,int32 data)" `433 
v L "stream" 1 591 "int8" `437 
v L "data" 1 591 "int8" `438 
v L "bits" 1 591 "int8" `439 
f G "spi_xfer" 1 591 "int8(int8 stream,int8 data,int8 bits)" `436 
v L "stream" 1 592 "int8" `437 
v L "data" 1 592 "int16" `438 
v L "bits" 1 592 "int8" `443 
f G "spi_xfer" 1 592 "int16(int8 stream,int16 data,int8 bits)" `440 
v L "stream" 1 593 "int8" `437 
v L "data" 1 593 "int32" `438 
v L "bits" 1 593 "int8" `447 
f G "spi_xfer" 1 593 "int32(int8 stream,int32 data,int8 bits)" `444 
v L "baud" 1 594 "int32" `449 
f B "spi_init" 1 594 "void(int32 baud)" `448 
v L "stream" 1 595 "int8" `451 
v L "baud" 1 595 "int32" `452 
f G "spi_init" 1 595 "void(int8 stream,int32 baud)" `450 
v L "baud" 1 596 "int32" `454 
f B "spi_speed" 1 596 "void(int32 baud)" `453 
v L "stream" 1 597 "int8" `456 
v L "baud" 1 597 "int32" `457 
f G "spi_speed" 1 597 "void(int8 stream,int32 baud)" `455 
v L "stream" 1 598 "int8" `459 
v L "baud" 1 598 "int32" `460 
v L "clock" 1 598 "int32" `461 
f G "spi_speed" 1 598 "void(int8 stream,int32 baud,int32 clock)" `458 
v L "data" 1 599 "int8" `463 
f B "spi_prewrite" 1 599 "void(int8 data)" `462 
v L "data" 1 600 "int16" `465 
f G "spi_prewrite" 1 600 "void(int16 data)" `464 
v L "data" 1 601 "int32" `467 
f G "spi_prewrite" 1 601 "void(int32 data)" `466 
v L "??65535" 1 602 "int8" `469 
v L "data" 1 602 "int8" `470 
f G "spi_prewrite" 1 602 "void(int8 ,int8 data)" `468 
v L "??65535" 1 603 "int8" `469 
v L "data" 1 603 "int16" `473 
f G "spi_prewrite" 1 603 "void(int8 ,int16 data)" `471 
v L "??65535" 1 604 "int8" `469 
v L "data" 1 604 "int32" `476 
f G "spi_prewrite" 1 604 "void(int8 ,int32 data)" `474 
f B "spi_xfer_in" 1 605 "int8()" `477 
f G "spi_xfer_in" 1 606 "int16()" `478 
f G "spi_xfer_in" 1 607 "int32()" `479 
v L "bits" 1 608 "int8" `481 
f G "spi_xfer_in" 1 608 "int8(int8 bits)" `480 
v L "bits" 1 609 "int8" `483 
f G "spi_xfer_in" 1 609 "int16(int8 bits)" `482 
v L "bits" 1 610 "int8" `485 
f G "spi_xfer_in" 1 610 "int32(int8 bits)" `484 
v L "stream" 1 611 "int8" `487 
v L "bits" 1 611 "int8" `488 
f G "spi_xfer_in" 1 611 "int8(int8 stream,int8 bits)" `486 
v L "stream" 1 612 "int8" `487 
v L "bits" 1 612 "int8" `491 
f G "spi_xfer_in" 1 612 "int16(int8 stream,int8 bits)" `489 
v L "stream" 1 613 "int8" `487 
v L "bits" 1 613 "int8" `494 
f G "spi_xfer_in" 1 613 "int32(int8 stream,int8 bits)" `492  "#use rtos() Prototypes:"
f B "rtos_run" 1 616 "void()" `495 
f B "rtos_yield" 1 617 "void()" `496 
v L "task" 1 618 "int8" `498 
f B "rtos_enable" 1 618 "void(int8 task)" `497 
v L "task" 1 619 "int8" `500 
f B "rtos_disable" 1 619 "void(int8 task)" `499 
f B "rtos_terminate" 1 620 "void()" `501 
v L "flag" 1 621 "int8" `503 
f B "rtos_await" 1 621 "void(int8 flag)" `502 
v L "sem" 1 622 "int8" `505 
f B "rtos_wait" 1 622 "void(int8 sem)" `504 
v L "sem" 1 623 "int8" `507 
f B "rtos_signal" 1 623 "void(int8 sem)" `506 
v L "task" 1 624 "int8" `509 
v L "msg" 1 624 "int8" `510 
f B "rtos_msg_send" 1 624 "void(int8 task,int8 msg)" `508 
f B "rtos_msg_read" 1 625 "int8()" `511 
f B "rtos_msg_poll" 1 626 "int8()" `512 
v L "task" 1 627 "int8" `514 
f B "rtos_overrun" 1 627 "int8(int8 task)" `513 
v L "task" 1 628 "int8" `516 
v L "stat" 1 628 "*int8" `517 
f B "rtos_stats" 1 628 "void(int8 task,*int8 stat)" `515  "#use timer() Prototypes:"
f B "get_ticks" 1 631 "int8()" `518 
f G "get_ticks" 1 632 "int16()" `519 
f G "get_ticks" 1 633 "int32()" `520 
v L "stream" 1 634 "int8" `522 
f G "get_ticks" 1 634 "int8(int8 stream)" `521 
v L "stream" 1 635 "int8" `524 
f G "get_ticks" 1 635 "int16(int8 stream)" `523 
v L "stream" 1 636 "int8" `526 
f G "get_ticks" 1 636 "int32(int8 stream)" `525 
v L "value" 1 637 "int8" `528 
f B "set_ticks" 1 637 "void(int8 value)" `527 
v L "value" 1 638 "int16" `530 
f G "set_ticks" 1 638 "void(int16 value)" `529 
v L "value" 1 639 "int32" `532 
f G "set_ticks" 1 639 "void(int32 value)" `531 
v L "stream" 1 640 "int8" `534 
v L "value" 1 640 "int8" `535 
f G "set_ticks" 1 640 "void(int8 stream,int8 value)" `533 
v L "stream" 1 641 "int8" `534 
v L "value" 1 641 "int16" `538 
f G "set_ticks" 1 641 "void(int8 stream,int16 value)" `536 
v L "stream" 1 642 "int8" `534 
v L "value" 1 642 "int32" `541 
f G "set_ticks" 1 642 "void(int8 stream,int32 value)" `539  "#use pwm() Prototypes:"
f B "pwm_on" 1 645 "void()" `542 
v L "stream" 1 646 "int8" `544 
f G "pwm_on" 1 646 "void(int8 stream)" `543 
f B "pwm_off" 1 647 "void()" `545 
v L "stream" 1 648 "int8" `547 
f G "pwm_off" 1 648 "void(int8 stream)" `546 
v L "duty" 1 649 "int16" `549 
f B "pwm_set_duty" 1 649 "void(int16 duty)" `548 
v L "stream" 1 650 "int8" `551 
v L "duty" 1 650 "int16" `552 
f G "pwm_set_duty" 1 650 "void(int8 stream,int16 duty)" `550 
v L "percent" 1 651 "int16" `554 
f B "pwm_set_duty_percent" 1 651 "void(int16 percent)" `553 
v L "stream" 1 652 "int8" `556 
v L "percent" 1 652 "int16" `557 
f G "pwm_set_duty_percent" 1 652 "void(int8 stream,int16 percent)" `555 
v L "frequency" 1 653 "int32" `559 
f B "pwm_set_frequency" 1 653 "void(int32 frequency)" `558 
v L "stream" 1 654 "int8" `561 
v L "frequency" 1 654 "int32" `562 
f G "pwm_set_frequency" 1 654 "void(int8 stream,int32 frequency)" `560  "#use capture() Prototypes:"
f B "get_capture_time" 1 657 "int16()" `563 
v L "stream" 1 658 "int8" `565 
f G "get_capture_time" 1 658 "int16(int8 stream)" `564 
f B "get_capture_event" 1 659 "int8()" `566 
v L "stream" 1 660 "int8" `568 
f G "get_capture_event" 1 660 "int8(int8 stream)" `567  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 673 "int16" `570 
f B "goto_address" 1 673 "void(int16 address)" `569 
v L "label" 1 674 "int16" `572 
f B "label_address" 1 674 "int16(int16 label)" `571  "Program Memory Prototypes:"
v L "address" 1 677 "int16" `574 
v L "dataptr" 1 677 "*int8" `575 
v L "count" 1 677 "int16" `576 
f B "read_program_memory" 1 677 "void(int16 address,*int8 dataptr,int16 count)" `573 
v L "address" 1 678 "int16" `578 
f B "read_program_eeprom" 1 678 "int16(int16 address)" `577 
v L "address" 1 679 "int16" `580 
f B "erase_program_eeprom" 1 679 "void(int16 address)" `579 
v L "address" 1 680 "int16" `582 
v L "dataptr" 1 680 "*int8" `583 
v L "count" 1 680 "int16" `584 
f B "write_program_memory" 1 680 "void(int16 address,*int8 dataptr,int16 count)" `581 
v L "address" 1 681 "int16" `586 
v L "data" 1 681 "int16" `587 
f B "write_program_eeprom" 1 681 "void(int16 address,int16 data)" `585  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 686 "int16" `588 
v L "address" 1 691 "__EEADDRESS__" `590 
f B "read_eeprom" 1 691 "int8(__EEADDRESS__ address)" `589 
v L "address" 1 692 "__EEADDRESS__" `592 
v L "value" 1 692 "int8" `593 
f B "write_eeprom" 1 692 "void(__EEADDRESS__ address,int8 value)" `591  "INT"
c L "write_eeprom" 1 5 4 "FUNCTION"
v L "interrupt" 1 699 "int32" `595 
f B "enable_interrupts" 1 699 "void(int32 interrupt)" `594 
v L "interrupt" 1 700 "int32" `597 
f B "disable_interrupts" 1 700 "void(int32 interrupt)" `596 
v L "interrupt" 1 701 "int32" `599 
f B "clear_interrupt" 1 701 "void(int32 interrupt)" `598 
v L "interrupt" 1 702 "int32" `601 
f B "interrupt_active" 1 702 "int8(int32 interrupt)" `600 
v L "source" 1 703 "int8" `603 
v L "edge" 1 703 "int8" `604 
f B "ext_int_edge" 1 703 "void(int8 source,int8 edge)" `602 
v L "address" 1 704 "int16" `606 
f B "jump_to_irs" 1 704 "void(int16 address)" `605  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 706 "0x40"
d G "H_TO_L" 1 707 "0"
d G "GLOBAL" 1 709 "0x0BC0"
d G "PERIPH" 1 710 "0x0B40"
d G "INT_RTCC" 1 711 "0x000B20"
d G "INT_RB" 1 712 "0x01FF0B08"
d G "INT_EXT_L2H" 1 713 "0x50000B10"
d G "INT_EXT_H2L" 1 714 "0x60000B10"
d G "INT_EXT" 1 715 "0x000B10"
d G "INT_AD" 1 716 "0x008C40"
d G "INT_TBE" 1 717 "0x008C10"
d G "INT_RDA" 1 718 "0x008C20"
d G "INT_TIMER1" 1 719 "0x008C01"
d G "INT_TIMER2" 1 720 "0x008C02"
d G "INT_CCP1" 1 721 "0x008C04"
d G "INT_CCP2" 1 722 "0x008D01"
d G "INT_SSP" 1 723 "0x008C08"
d G "INT_BUSCOL" 1 724 "0x008D08"
d G "INT_EEPROM" 1 725 "0x008D10"
d G "INT_TIMER0" 1 726 "0x000B20"
d G "INT_OSC_FAIL" 1 727 "0x008D80"
d G "INT_COMP" 1 728 "0x008D20"
d G "INT_COMP2" 1 729 "0x008D40"
d G "INT_ULPWU" 1 730 "0x008D04"
d G "INT_RB0" 1 731 "0x1010B08"
d G "INT_RB1" 1 732 "0x1020B08"
d G "INT_RB2" 1 733 "0x1040B08"
d G "INT_RB3" 1 734 "0x1080B08"
d G "INT_RB4" 1 735 "0x1100B08"
d G "INT_RB5" 1 736 "0x1200B08"
d G "INT_RB6" 1 737 "0x1400B08"
d G "INT_RB7" 1 738 "0x1800B08"
V G "abcd" 0 13 "[1]" `617  "Codigo ascii  '0' = 48                    Char      PI    PF    ID"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 3 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 3 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 1 "FUNCTION"
C L "jump_to_irs" 0 16 3 "FUNCTION"
C L "jump_to_irs" 0 16 2 "FUNCTION"
V L "a" 0 88 "int16" `621 
F G "comprobar_adc" 0 89 "int8(int16 a)" `620 
V L "c" 0 92 "int8" `623 
F G "id_letras" 0 93 "int8(int8 c)" `622 
V L "carateres" 0 96 "*int8" `625 
V L "tam" 0 96 "int8" `626 
V L "tiempo" 0 96 "int8" `627 
F G "Mostrar" 0 97 "void(*int8 carateres,int8 tam,int8 tiempo)" `624 
V L "letras_arr" 0 98 "int8[18]" `629 
V L "inicio" 0 98 "int8" `630 
V L "id_char" 0 98 "int8" `631 
V L "i_mat" 0 99 "int16" `632 
V L "i" 0 99 "int16" `633 
V L "j" 0 99 "int16" `634 
C L "MAIN" 0 16 1 "FUNCTION"
F G "MAIN" 0 133 "void()" `638 
C L "MAIN" 0 16 1 "FUNCTION"
V L "m_t1" 0 140 "int8" `641 
V L "cmsj" 0 141 "[31]" `643 
V L "msj_m" 0 143 "int8[3]" `646 
V L "k" 0 144 "int8" `647 
V L "l" 0 144 "int8" `648 
V L "aux" 0 144 "int8" `649 
C L "MAIN" 0 16 1 "FUNCTION"
V L "f_mod" 0 154 "int1" `650 
V L "modo" 0 155 "int8" `651 
V L "msj_md" 0 156 "int8[8]" `652 
V L "j" 0 168 "int8" `653 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
