CCS PCH C Compiler, Version 5.007, 59972               20-ago.-18 18:03

               Filename:   C:\Users\ivan-\Documents\MEGA\Compartido\Microcontroladores\ETS Microc\pwm_rgb\rgb.lst

               ROM used:   428 bytes (1%)
                           Largest free fragment is 32336
               RAM used:   27 (1%) at main() level
                           29 (1%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   00FC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0096
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device ADC=8   // adc a 8 bits 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES INTHS 
....................  
.................... #use delay(crystal=20000000) 
*
00D4:  CLRF   FEA
00D6:  MOVLW  1C
00D8:  MOVWF  FE9
00DA:  MOVF   FEF,W
00DC:  BZ    00F8
00DE:  MOVLW  06
00E0:  MOVWF  01
00E2:  CLRF   00
00E4:  DECFSZ 00,F
00E6:  BRA    00E4
00E8:  DECFSZ 01,F
00EA:  BRA    00E2
00EC:  MOVLW  7B
00EE:  MOVWF  00
00F0:  DECFSZ 00,F
00F2:  BRA    00F0
00F4:  DECFSZ FEF,F
00F6:  BRA    00DE
00F8:  GOTO   018A (RETURN)
....................  
.................... #BYTE LATD  = 0xF8C       // dereccionando el registro latd 
.................... #BIT  RBPU  = 0xFF1.7     // pull-up all port b 
.................... //  variables generales 
.................... int8 cnt_tmr0 = 0, type = 0;    // variables auxiliares 
.................... int8 Color1 = 0, Color2 = 0, Color3 = 0;  // variales para los colores 
.................... /// interrupcion por timer 0 
.................... #INT_TIMER0 
.................... void  TIMER0_isr(void) {  //funcion para generar el pwm para cada color 
....................     if(!(++cnt_tmr0)){  // incrementa la variable auxiliar 
*
0096:  INCF   16,F
0098:  MOVF   16,F
009A:  BNZ   00B0
....................         if(Color1 > 0)  bit_set(LATD,0);  // pone en estado alto si no es 0 
009C:  MOVF   18,F
009E:  BZ    00A2
00A0:  BSF    F8C.0
....................         if(Color2 > 0)  bit_set(LATD,1);  // pone en estado alto si no es 0 
00A2:  MOVF   19,F
00A4:  BZ    00A8
00A6:  BSF    F8C.1
....................         if(Color3 > 0)  bit_set(LATD,2);  // pone en estado alto si no es 0 
00A8:  MOVF   1A,F
00AA:  BZ    00AE
00AC:  BSF    F8C.2
....................       cnt_tmr0++; // incrementa 
00AE:  INCF   16,F
....................     } 
....................     if(cnt_tmr0 == Color1)  bit_clear(LATD,0);  // pone en estado bajo si coinciden 
00B0:  MOVF   18,W
00B2:  SUBWF  16,W
00B4:  BNZ   00B8
00B6:  BCF    F8C.0
....................     if(cnt_tmr0 == Color2)  bit_clear(LATD,1);  // pone en estado bajo si coinciden 
00B8:  MOVF   19,W
00BA:  SUBWF  16,W
00BC:  BNZ   00C0
00BE:  BCF    F8C.1
....................     if(cnt_tmr0 == Color3)  bit_clear(LATD,2);  // pone en estado bajo si coinciden 
00C0:  MOVF   1A,W
00C2:  SUBWF  16,W
00C4:  BNZ   00C8
00C6:  BCF    F8C.2
....................     set_timer0(200);  // precarga el timer 0 
00C8:  CLRF   FD7
00CA:  MOVLW  C8
00CC:  MOVWF  FD6
00CE:  BCF    FF2.2
00D0:  GOTO   0054
.................... } 
.................... // programa principal 
.................... void main(){ 
*
00FC:  CLRF   FF8
00FE:  BCF    FD0.7
0100:  BSF    07.7
0102:  CLRF   16
0104:  CLRF   17
0106:  CLRF   18
0108:  CLRF   19
010A:  CLRF   1A
010C:  MOVF   FC1,W
010E:  ANDLW  C0
0110:  IORLW  0F
0112:  MOVWF  FC1
0114:  MOVLW  07
0116:  MOVWF  FB4
....................    setup_oscillator(OSC_8MHZ | OSC_INTRC); 
0118:  MOVLW  72
011A:  MOVWF  FD3
011C:  MOVF   FD3,W
....................    RBPU = 0;  // pull-up todo el puerto b 
011E:  BCF    FF1.7
....................    set_tris_a(0xFF);    // establece entradas/salidas 
0120:  MOVLW  FF
0122:  MOVWF  F92
....................    set_tris_d(0xF0);    // establece entradas/salidas 
0124:  MOVLW  F0
0126:  MOVWF  F95
....................    set_tris_b(0xFF);    // establece entradas/salidas 
0128:  MOVLW  FF
012A:  MOVWF  F93
....................  
....................    setup_adc(ADC_CLOCK_DIV_32 | ADC_TAD_MUL_8 | VSS_VDD );  // adc clock interno dividido en 64, 8 tda 
012C:  MOVF   FC0,W
012E:  ANDLW  C0
0130:  IORLW  22
0132:  MOVWF  FC0
0134:  BCF    FC0.7
0136:  BSF    FC2.0
....................    setup_adc_ports(AN0);  // establece los canales analogicos 
0138:  MOVF   FC1,W
013A:  ANDLW  C0
013C:  IORLW  0E
013E:  MOVWF  FC1
....................    set_adc_channel(0);  // ADC channel 0 
0140:  MOVLW  00
0142:  MOVWF  01
0144:  MOVF   FC2,W
0146:  ANDLW  C3
0148:  IORWF  01,W
014A:  MOVWF  FC2
....................  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1|RTCC_8_bit);   // TIMER0 interno a 8 bits 
014C:  MOVLW  C8
014E:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0);     // habilita la interrupcion por timer 0 
0150:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);         // habilita todas las interrupciones 
0152:  MOVLW  C0
0154:  IORWF  FF2,F
....................    int i;         // variable auxiliar 
....................    while(TRUE){     // bucle infinito 
....................      i = (int8) read_adc(); // lee el puerto analogico 
0156:  BSF    FC2.1
0158:  BTFSC  FC2.1
015A:  BRA    0158
015C:  MOVFF  FC4,1B
....................      switch(type){  // para seleccionar el color 
0160:  MOVF   17,W
0162:  BZ    016E
0164:  XORLW  01
0166:  BZ    0174
0168:  XORLW  03
016A:  BZ    017A
016C:  BRA    017E
....................        // asigna el valor dependiendo del color 
....................        case 0: Color1 = i ;  break; 
016E:  MOVFF  1B,18
0172:  BRA    017E
....................        case 1: Color2 = i ;  break; 
0174:  MOVFF  1B,19
0178:  BRA    017E
....................        case 2: Color3 = i ;  break; 
017A:  MOVFF  1B,1A
....................      } 
....................      if(!input(PIN_B0)){    // si es presionado el boton 
017E:  BSF    F93.0
0180:  BTFSC  F81.0
0182:  BRA    01A0
....................         delay_ms(1);    // rutina antirebote 
0184:  MOVLW  01
0186:  MOVWF  1C
0188:  BRA    00D4
....................         while (!input(PIN_B0)); // rutina antirebote 
018A:  BSF    F93.0
018C:  BTFSS  F81.0
018E:  BRA    018A
....................         type = type >= 2? 0 : type + 1; // selecciona el color 
0190:  MOVF   17,W
0192:  SUBLW  01
0194:  BC    019A
0196:  MOVLW  00
0198:  BRA    019E
019A:  MOVLW  01
019C:  ADDWF  17,W
019E:  MOVWF  17
....................      } 
....................      delay_us(50);    // pausa 
01A0:  MOVLW  52
01A2:  MOVWF  00
01A4:  DECFSZ 00,F
01A6:  BRA    01A4
01A8:  BRA    01AA
01AA:  NOP   
01AC:  BRA    0156
....................    } 
....................  
.................... } 
01AE:  SLEEP 

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
