CCS PCM C Compiler, Version 4.130, 59972               08-jun.-15 18:41

               Filename: C:\Users\ivan-_000\Documents\MEGA\PIC\Pic C\16f628\Motor a pasos\motor a pasos.lst

               ROM used: 1713 words (42%)
                         Largest free fragment is 2048
               RAM used: 29 (11%) at main() level
                         49 (19%) worst case
               Stack:    6 locations

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   478
0003:  NOP
.................... #include <16f648a.h> 
.................... //////// Standard Header file for the PIC16F648A device //////////////// 
.................... #device PIC16F648A 
.................... #list 
....................  
.................... #fuses HS 
.................... #fuses MCLR 
.................... #fuses NOWDT 
.................... #fuses NOPUT 
.................... #fuses NOLVP 
.................... #fuses NOPROTECT 
.................... #fuses NOCPD 
.................... #fuses NOBROWNOUT 
.................... #use delay(clock=4M) 
*
0200:  MOVLW  44
0201:  MOVWF  04
0202:  BCF    03.7
0203:  MOVF   00,W
0204:  BTFSC  03.2
0205:  GOTO   214
0206:  MOVLW  01
0207:  MOVWF  78
0208:  CLRF   77
0209:  DECFSZ 77,F
020A:  GOTO   209
020B:  DECFSZ 78,F
020C:  GOTO   208
020D:  MOVLW  4A
020E:  MOVWF  77
020F:  DECFSZ 77,F
0210:  GOTO   20F
0211:  GOTO   212
0212:  DECFSZ 00,F
0213:  GOTO   206
0214:  RETURN
*
0454:  MOVLW  12
0455:  SUBWF  3D,F
0456:  BTFSS  03.0
0457:  GOTO   467
0458:  MOVLW  3D
0459:  MOVWF  04
045A:  BCF    03.7
045B:  MOVLW  FC
045C:  ANDWF  00,F
045D:  BCF    03.0
045E:  RRF    00,F
045F:  RRF    00,F
0460:  MOVF   00,W
0461:  BTFSC  03.2
0462:  GOTO   467
0463:  GOTO   465
0464:  NOP
0465:  DECFSZ 00,F
0466:  GOTO   464
.................... #BYTE TRISA=0x85 
.................... #BYTE PORTA=0x05 
.................... #BYTE TRISB=0x86 
.................... #BYTE PORTB=0x06 
.................... //Uso de librerias 
....................    #define use_portb_kbd TRUE 
....................    #include <kbd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
.................... } 
*
01FE:  BCF    0A.3
01FF:  GOTO   489 (RETURN)
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
047F:  CLRF   20
....................    static int1 kbd_down; 
0480:  BCF    21.0
....................    static char last_key; 
0481:  CLRF   22
....................    static BYTE col; 
0482:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
02CB:  CLRF   3C
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
02CC:  INCF   20,F
02CD:  MOVF   20,W
02CE:  SUBLW  21
02CF:  BTFSC  03.0
02D0:  GOTO   347
....................        switch (col) { 
02D1:  MOVF   23,W
02D2:  BTFSC  03.2
02D3:  GOTO   2DB
02D4:  XORLW  01
02D5:  BTFSC  03.2
02D6:  GOTO   2DF
02D7:  XORLW  03
02D8:  BTFSC  03.2
02D9:  GOTO   2E3
02DA:  GOTO   2E7
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
02DB:  MOVLW  DE
02DC:  TRIS   6
....................                     kbd=~COL0&ALL_PINS; 
02DD:  MOVWF  06
....................                     break; 
02DE:  GOTO   2E7
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
02DF:  MOVLW  BE
02E0:  TRIS   6
....................                     kbd=~COL1&ALL_PINS; 
02E1:  MOVWF  06
....................                     break; 
02E2:  GOTO   2E7
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
02E3:  MOVLW  7E
02E4:  TRIS   6
....................                     kbd=~COL2&ALL_PINS; 
02E5:  MOVWF  06
....................                     break; 
02E6:  GOTO   2E7
....................        } 
....................  
....................        if(kbd_down) { 
02E7:  BTFSS  21.0
02E8:  GOTO   2F3
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
02E9:  MOVF   06,W
02EA:  ANDLW  1E
02EB:  SUBLW  1E
02EC:  BTFSS  03.2
02ED:  GOTO   2F2
....................            kbd_down=FALSE; 
02EE:  BCF    21.0
....................            kchar=last_key; 
02EF:  MOVF   22,W
02F0:  MOVWF  3C
....................            last_key='\0'; 
02F1:  CLRF   22
....................          } 
....................        } else { 
02F2:  GOTO   346
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
02F3:  MOVF   06,W
02F4:  ANDLW  1E
02F5:  SUBLW  1E
02F6:  BTFSC  03.2
02F7:  GOTO   341
....................              if((kbd & ROW0)==0) 
02F8:  MOVF   06,W
02F9:  ANDLW  02
02FA:  BTFSS  03.2
02FB:  GOTO   2FE
....................                row=0; 
02FC:  CLRF   3D
....................              else if((kbd & ROW1)==0) 
02FD:  GOTO   312
02FE:  MOVF   06,W
02FF:  ANDLW  04
0300:  BTFSS  03.2
0301:  GOTO   305
....................                row=1; 
0302:  MOVLW  01
0303:  MOVWF  3D
....................              else if((kbd & ROW2)==0) 
0304:  GOTO   312
0305:  MOVF   06,W
0306:  ANDLW  08
0307:  BTFSS  03.2
0308:  GOTO   30C
....................                row=2; 
0309:  MOVLW  02
030A:  MOVWF  3D
....................              else if((kbd & ROW3)==0) 
030B:  GOTO   312
030C:  MOVF   06,W
030D:  ANDLW  10
030E:  BTFSS  03.2
030F:  GOTO   312
....................                row=3; 
0310:  MOVLW  03
0311:  MOVWF  3D
....................              last_key =KEYS[row][col]; 
0312:  MOVF   3D,W
0313:  MOVWF  3E
0314:  MOVLW  03
0315:  MOVWF  3F
*
033A:  MOVF   23,W
033B:  ADDWF  78,W
033C:  CALL   004
033D:  MOVWF  78
033E:  MOVWF  22
....................              kbd_down = TRUE; 
033F:  BSF    21.0
....................           } else { 
0340:  GOTO   346
....................              ++col; 
0341:  INCF   23,F
....................              if(col==3) 
0342:  MOVF   23,W
0343:  SUBLW  03
0344:  BTFSC  03.2
....................                col=0; 
0345:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
0346:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
0347:  MOVLW  FE
0348:  TRIS   6
....................   return(kchar); 
0349:  MOVF   3C,W
034A:  MOVWF  78
.................... } 
034B:  RETURN
....................  
....................    #include <lcd420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0222:  MOVLW  F0
0223:  TRIS   6
....................       lcd.rw = 1; 
0224:  BSF    06.2
....................       delay_cycles(1); 
0225:  NOP
....................       lcd.enable = 1; 
0226:  BSF    06.0
....................       delay_cycles(1); 
0227:  NOP
....................       high = lcd.data; 
0228:  MOVF   06,W
0229:  SWAPF  06,W
022A:  ANDLW  0F
022B:  MOVWF  4A
....................       lcd.enable = 0; 
022C:  BCF    06.0
....................       delay_cycles(1); 
022D:  NOP
....................       lcd.enable = 1; 
022E:  BSF    06.0
....................       delay_us(1); 
022F:  NOP
....................       low = lcd.data; 
0230:  MOVF   06,W
0231:  SWAPF  06,W
0232:  ANDLW  0F
0233:  MOVWF  49
....................       lcd.enable = 0; 
0234:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0235:  MOVLW  00
0236:  TRIS   6
....................       return( (high<<4) | low); 
0237:  SWAPF  4A,W
0238:  MOVWF  77
0239:  MOVLW  F0
023A:  ANDWF  77,F
023B:  MOVF   77,W
023C:  IORWF  49,W
023D:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0215:  SWAPF  4A,W
0216:  ANDLW  F0
0217:  MOVWF  77
0218:  MOVLW  0F
0219:  ANDWF  06,W
021A:  IORWF  77,W
021B:  MOVWF  06
....................       delay_cycles(1); 
021C:  NOP
....................       lcd.enable = 1; 
021D:  BSF    06.0
....................       delay_us(2); 
021E:  GOTO   21F
....................       lcd.enable = 0; 
021F:  BCF    06.0
.................... } 
0220:  RETURN
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0221:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
023E:  MOVF   78,W
023F:  MOVWF  49
0240:  BTFSC  49.7
0241:  GOTO   222
....................       lcd.rs = address; 
0242:  BTFSS  47.0
0243:  BCF    06.1
0244:  BTFSC  47.0
0245:  BSF    06.1
....................       delay_cycles(1); 
0246:  NOP
....................       lcd.rw = 0; 
0247:  BCF    06.2
....................       delay_cycles(1); 
0248:  NOP
....................       lcd.enable = 0; 
0249:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
024A:  SWAPF  48,W
024B:  MOVWF  49
024C:  MOVLW  0F
024D:  ANDWF  49,F
024E:  MOVF   49,W
024F:  MOVWF  4A
0250:  CALL   215
....................       lcd_send_nibble(n & 0xf); 
0251:  MOVF   48,W
0252:  ANDLW  0F
0253:  MOVWF  49
0254:  MOVWF  4A
0255:  CALL   215
.................... } 
0256:  RETURN
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0257:  MOVLW  00
0258:  TRIS   6
....................     lcd.rs = 0; 
0259:  BCF    06.1
....................     lcd.rw = 0; 
025A:  BCF    06.2
....................     lcd.enable = 0; 
025B:  BCF    06.0
....................     delay_ms(15); 
025C:  MOVLW  0F
025D:  MOVWF  44
025E:  CALL   200
....................     for(i=1;i<=3;++i) { 
025F:  MOVLW  01
0260:  MOVWF  37
0261:  MOVF   37,W
0262:  SUBLW  03
0263:  BTFSS  03.0
0264:  GOTO   26D
....................        lcd_send_nibble(3); 
0265:  MOVLW  03
0266:  MOVWF  4A
0267:  CALL   215
....................        delay_ms(5); 
0268:  MOVLW  05
0269:  MOVWF  44
026A:  CALL   200
....................     } 
026B:  INCF   37,F
026C:  GOTO   261
....................     lcd_send_nibble(2); 
026D:  MOVLW  02
026E:  MOVWF  4A
026F:  CALL   215
....................     for(i=0;i<=3;++i) 
0270:  CLRF   37
0271:  MOVF   37,W
0272:  SUBLW  03
0273:  BTFSS  03.0
0274:  GOTO   27E
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0275:  MOVF   37,W
0276:  CALL   014
0277:  MOVWF  38
0278:  CLRF   47
0279:  MOVF   38,W
027A:  MOVWF  48
027B:  CALL   221
027C:  INCF   37,F
027D:  GOTO   271
.................... } 
027E:  BCF    0A.3
027F:  GOTO   48A (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0280:  MOVLW  01
0281:  SUBWF  45,W
0282:  ADDLW  FC
0283:  BTFSC  03.0
0284:  GOTO   293
0285:  ADDLW  04
0286:  GOTO   29B
....................      case 1 : address=0x80;break; 
0287:  MOVLW  80
0288:  MOVWF  46
0289:  GOTO   293
....................      case 2 : address=0xc0;break; 
028A:  MOVLW  C0
028B:  MOVWF  46
028C:  GOTO   293
....................      case 3 : address=0x94;break; 
028D:  MOVLW  94
028E:  MOVWF  46
028F:  GOTO   293
....................      case 4 : address=0xd4;break; 
0290:  MOVLW  D4
0291:  MOVWF  46
0292:  GOTO   293
....................    } 
....................    address+=x-1; 
0293:  MOVLW  01
0294:  SUBWF  44,W
0295:  ADDWF  46,F
....................    lcd_send_byte(0,address); 
0296:  CLRF   47
0297:  MOVF   46,W
0298:  MOVWF  48
0299:  CALL   221
.................... } 
029A:  RETURN
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
02A3:  MOVF   43,W
02A4:  XORLW  0C
02A5:  BTFSC  03.2
02A6:  GOTO   2AE
02A7:  XORLW  06
02A8:  BTFSC  03.2
02A9:  GOTO   2B8
02AA:  XORLW  02
02AB:  BTFSC  03.2
02AC:  GOTO   2BF
02AD:  GOTO   2C4
....................      case '\f'   : lcd_send_byte(0,1); 
02AE:  CLRF   47
02AF:  MOVLW  01
02B0:  MOVWF  48
02B1:  CALL   221
....................                    lcdline=1; 
02B2:  MOVLW  01
02B3:  MOVWF  24
....................                    delay_ms(2); 
02B4:  MOVLW  02
02B5:  MOVWF  44
02B6:  CALL   200
....................                                            break; 
02B7:  GOTO   2CA
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02B8:  INCF   24,F
02B9:  MOVLW  01
02BA:  MOVWF  44
02BB:  MOVF   24,W
02BC:  MOVWF  45
02BD:  CALL   280
02BE:  GOTO   2CA
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02BF:  CLRF   47
02C0:  MOVLW  10
02C1:  MOVWF  48
02C2:  CALL   221
02C3:  GOTO   2CA
....................      default     : lcd_send_byte(1,c);     break; 
02C4:  MOVLW  01
02C5:  MOVWF  47
02C6:  MOVF   43,W
02C7:  MOVWF  48
02C8:  CALL   221
02C9:  GOTO   2CA
....................    } 
.................... } 
02CA:  RETURN
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... //Prototipos de funciones 
....................    long teclado_numeros(int y); 
....................    short pausa_tec(long t); 
.................... //Variables generales 
....................    short aux=false; 
....................    int i,tec,modo,sentido; 
....................    long pausa,pasos,pa,numero[4]; 
....................    //float ; 
.................... //Programa principal 
.................... void main() 
.................... { 
*
0478:  CLRF   04
0479:  BCF    03.7
047A:  MOVLW  1F
047B:  ANDWF  03,F
047C:  BCF    21.1
047D:  MOVLW  07
047E:  MOVWF  1F
....................    port_b_pullups(true); 
*
0483:  BSF    03.5
0484:  BCF    01.7
....................    trisa=0; 
0485:  CLRF   05
....................    porta=0; 
0486:  BCF    03.5
0487:  CLRF   05
....................    kbd_init(); 
0488:  GOTO   1FE
....................    lcd_init(); 
0489:  GOTO   257
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
048A:  MOVLW  85
048B:  MOVWF  10
....................    lcd_putc("\f    Bienvenidos\n\n   Control de un\n Motor paso a paso"); 
048C:  CLRF   37
048D:  MOVF   37,W
048E:  CALL   01C
048F:  IORLW  00
0490:  BTFSC  03.2
0491:  GOTO   496
0492:  INCF   37,F
0493:  MOVWF  43
0494:  CALL   2A3
0495:  GOTO   48D
....................    delay_ms(2000); 
0496:  MOVLW  08
0497:  MOVWF  37
0498:  MOVLW  FA
0499:  MOVWF  44
049A:  CALL   200
049B:  DECFSZ 37,F
049C:  GOTO   498
....................    while(true) 
....................    { 
....................       porta=0; 
049D:  CLRF   05
....................       lcd_putc("\fMenu:\n1=Pasos izquierda\n2=Pasos derecha\n3=Giro infinito"); 
049E:  CLRF   37
049F:  MOVF   37,W
04A0:  CALL   056
04A1:  IORLW  00
04A2:  BTFSC  03.2
04A3:  GOTO   4A8
04A4:  INCF   37,F
04A5:  MOVWF  43
04A6:  CALL   2A3
04A7:  GOTO   49F
....................       do 
....................       { 
....................          tec=kbd_getc(); 
04A8:  CALL   2CB
04A9:  MOVF   78,W
04AA:  MOVWF  26
....................          if((tec=='*') | (tec=='#')) 
04AB:  MOVF   26,W
04AC:  SUBLW  2A
04AD:  BTFSC  03.2
04AE:  GOTO   4B1
04AF:  MOVLW  00
04B0:  GOTO   4B2
04B1:  MOVLW  01
04B2:  MOVWF  37
04B3:  MOVF   26,W
04B4:  SUBLW  23
04B5:  BTFSC  03.2
04B6:  GOTO   4B9
04B7:  MOVLW  00
04B8:  GOTO   4BA
04B9:  MOVLW  01
04BA:  IORWF  37,W
04BB:  BTFSC  03.2
04BC:  GOTO   4BF
....................             tec=0; 
04BD:  CLRF   26
....................          else 
04BE:  GOTO   4C5
....................          { 
....................             tec-=48; 
04BF:  MOVLW  30
04C0:  SUBWF  26,F
....................             if (tec>3) 
04C1:  MOVF   26,W
04C2:  SUBLW  03
04C3:  BTFSS  03.0
....................                tec=0; 
04C4:  CLRF   26
....................          } 
....................       }while(!tec); 
04C5:  MOVF   26,F
04C6:  BTFSC  03.2
04C7:  GOTO   4A8
....................       modo=tec; 
04C8:  MOVF   26,W
04C9:  MOVWF  27
....................       if(modo==3) 
04CA:  MOVF   27,W
04CB:  SUBLW  03
04CC:  BTFSS  03.2
04CD:  GOTO   597
....................       { 
....................          lcd_putc("\fEstablece el sentido\nPress:* izq # der"); 
04CE:  CLRF   37
04CF:  MOVF   37,W
04D0:  CALL   093
04D1:  IORLW  00
04D2:  BTFSC  03.2
04D3:  GOTO   4D8
04D4:  INCF   37,F
04D5:  MOVWF  43
04D6:  CALL   2A3
04D7:  GOTO   4CF
....................          do 
....................          { 
....................             tec=kbd_getc(); 
04D8:  CALL   2CB
04D9:  MOVF   78,W
04DA:  MOVWF  26
....................             if((tec=='*') | (tec=='#')) 
04DB:  MOVF   26,W
04DC:  SUBLW  2A
04DD:  BTFSC  03.2
04DE:  GOTO   4E1
04DF:  MOVLW  00
04E0:  GOTO   4E2
04E1:  MOVLW  01
04E2:  MOVWF  37
04E3:  MOVF   26,W
04E4:  SUBLW  23
04E5:  BTFSC  03.2
04E6:  GOTO   4E9
04E7:  MOVLW  00
04E8:  GOTO   4EA
04E9:  MOVLW  01
04EA:  IORWF  37,W
04EB:  BTFSC  03.2
04EC:  GOTO   4F0
....................                sentido=tec; 
04ED:  MOVF   26,W
04EE:  MOVWF  28
....................             else 
04EF:  GOTO   4F1
....................                tec=0; 
04F0:  CLRF   26
....................          }while(!tec); 
04F1:  MOVF   26,F
04F2:  BTFSC  03.2
04F3:  GOTO   4D8
....................          lcd_gotoxy(1,2); 
04F4:  MOVLW  01
04F5:  MOVWF  44
04F6:  MOVLW  02
04F7:  MOVWF  45
04F8:  CALL   280
....................          switch(sentido) 
....................          { 
04F9:  MOVF   28,W
04FA:  XORLW  2A
04FB:  BTFSC  03.2
04FC:  GOTO   501
04FD:  XORLW  09
04FE:  BTFSC  03.2
04FF:  GOTO   50C
0500:  GOTO   517
....................             case '*': 
....................                lcd_putc("     Izquierda    "); 
0501:  CLRF   37
0502:  MOVF   37,W
0503:  CALL   0BF
0504:  IORLW  00
0505:  BTFSC  03.2
0506:  GOTO   50B
0507:  INCF   37,F
0508:  MOVWF  43
0509:  CALL   2A3
050A:  GOTO   502
....................             break; 
050B:  GOTO   517
....................             case '#': 
....................                lcd_putc("     Derecha      "); 
050C:  CLRF   37
050D:  MOVF   37,W
050E:  CALL   0D6
050F:  IORLW  00
0510:  BTFSC  03.2
0511:  GOTO   516
0512:  INCF   37,F
0513:  MOVWF  43
0514:  CALL   2A3
0515:  GOTO   50D
....................             break; 
0516:  GOTO   517
....................          } 
....................          lcd_gotoxy(2,3); 
0517:  MOVLW  02
0518:  MOVWF  44
0519:  MOVLW  03
051A:  MOVWF  45
051B:  CALL   280
....................          lcd_putc("Pausa entre pasos:"); 
051C:  CLRF   37
051D:  MOVF   37,W
051E:  CALL   0ED
051F:  IORLW  00
0520:  BTFSC  03.2
0521:  GOTO   526
0522:  INCF   37,F
0523:  MOVWF  43
0524:  CALL   2A3
0525:  GOTO   51D
....................          pausa=teclado_numeros(4); 
0526:  MOVLW  04
0527:  MOVWF  37
0528:  CALL   3C4
0529:  MOVF   79,W
052A:  MOVWF  2A
052B:  MOVF   78,W
052C:  MOVWF  29
....................          if(pausa>1000) 
052D:  MOVF   2A,W
052E:  SUBLW  02
052F:  BTFSC  03.0
0530:  GOTO   53D
0531:  XORLW  FF
0532:  BTFSS  03.2
0533:  GOTO   538
0534:  MOVF   29,W
0535:  SUBLW  E8
0536:  BTFSC  03.0
0537:  GOTO   53D
....................             pausa=1000; 
0538:  MOVLW  03
0539:  MOVWF  2A
053A:  MOVLW  E8
053B:  MOVWF  29
....................          else  
053C:  GOTO   546
....................             if(pausa<1) 
053D:  MOVF   29,F
053E:  BTFSS  03.2
053F:  GOTO   546
0540:  MOVF   2A,F
0541:  BTFSS  03.2
0542:  GOTO   546
....................                pausa=1; 
0543:  CLRF   2A
0544:  MOVLW  01
0545:  MOVWF  29
....................          lcd_gotoxy(3,4); 
0546:  MOVLW  03
0547:  MOVWF  44
0548:  MOVLW  04
0549:  MOVWF  45
054A:  CALL   280
....................          printf(lcd_putc,"%Lu milisegundos",pausa); 
054B:  MOVLW  10
054C:  MOVWF  04
054D:  MOVF   2A,W
054E:  MOVWF  3B
054F:  MOVF   29,W
0550:  MOVWF  3A
0551:  CALL   34C
0552:  MOVLW  03
0553:  MOVWF  37
0554:  MOVF   37,W
0555:  CALL   107
0556:  INCF   37,F
0557:  MOVWF  77
0558:  MOVWF  43
0559:  CALL   2A3
055A:  MOVLW  10
055B:  SUBWF  37,W
055C:  BTFSS  03.2
055D:  GOTO   554
....................          lcd_gotoxy(1,1); 
055E:  MOVLW  01
055F:  MOVWF  44
0560:  MOVWF  45
0561:  CALL   280
....................          lcd_putc("   Giro inifinito   "); 
0562:  CLRF   37
0563:  MOVF   37,W
0564:  CALL   11C
0565:  IORLW  00
0566:  BTFSC  03.2
0567:  GOTO   56C
0568:  INCF   37,F
0569:  MOVWF  43
056A:  CALL   2A3
056B:  GOTO   563
....................          delay_ms(200); 
056C:  MOVLW  C8
056D:  MOVWF  44
056E:  CALL   200
....................          aux=true; 
056F:  BSF    21.1
....................          while(aux) 
....................          { 
0570:  BTFSS  21.1
0571:  GOTO   596
....................             if(sentido=='*') 
0572:  MOVF   28,W
0573:  SUBLW  2A
0574:  BTFSS  03.2
0575:  GOTO   579
....................                porta=1; 
0576:  MOVLW  01
0577:  MOVWF  05
....................             else 
0578:  GOTO   57B
....................                porta=8; 
0579:  MOVLW  08
057A:  MOVWF  05
....................             for(i=0;i<4;i++) 
057B:  CLRF   25
057C:  MOVF   25,W
057D:  SUBLW  03
057E:  BTFSS  03.0
057F:  GOTO   595
....................             { 
....................                aux=pausa_tec(pausa); 
0580:  MOVF   2A,W
0581:  MOVWF  38
0582:  MOVF   29,W
0583:  MOVWF  37
0584:  CALL   443
0585:  BCF    21.1
0586:  BTFSC  78.0
0587:  BSF    21.1
....................                if(sentido=='*') 
0588:  MOVF   28,W
0589:  SUBLW  2A
058A:  BTFSS  03.2
058B:  GOTO   58F
....................                   porta*=2; 
058C:  BCF    03.0
058D:  RLF    05,F
....................                else 
058E:  GOTO   591
....................                   porta/=2; 
058F:  BCF    03.0
0590:  RRF    05,F
....................                if(aux==false) 
0591:  BTFSS  21.1
....................                break; 
0592:  GOTO   595
....................             } 
0593:  INCF   25,F
0594:  GOTO   57C
....................          } 
0595:  GOTO   570
....................       } 
....................       else 
0596:  GOTO   6AF
....................       { 
....................          lcd_putc("\fSeleccione el numero\n de pasos en el\n sentido"); 
0597:  CLRF   37
0598:  MOVF   37,W
0599:  CALL   135
059A:  IORLW  00
059B:  BTFSC  03.2
059C:  GOTO   5A1
059D:  INCF   37,F
059E:  MOVWF  43
059F:  CALL   2A3
05A0:  GOTO   598
....................          lcd_gotoxy(10,3); 
05A1:  MOVLW  0A
05A2:  MOVWF  44
05A3:  MOVLW  03
05A4:  MOVWF  45
05A5:  CALL   280
....................          if(modo==1) 
05A6:  DECFSZ 27,W
05A7:  GOTO   5B3
....................             lcd_putc("izquierdo"); 
05A8:  CLRF   37
05A9:  MOVF   37,W
05AA:  CALL   168
05AB:  IORLW  00
05AC:  BTFSC  03.2
05AD:  GOTO   5B2
05AE:  INCF   37,F
05AF:  MOVWF  43
05B0:  CALL   2A3
05B1:  GOTO   5A9
....................          else 
05B2:  GOTO   5BD
....................             lcd_putc("derecho"); 
05B3:  CLRF   37
05B4:  MOVF   37,W
05B5:  CALL   176
05B6:  IORLW  00
05B7:  BTFSC  03.2
05B8:  GOTO   5BD
05B9:  INCF   37,F
05BA:  MOVWF  43
05BB:  CALL   2A3
05BC:  GOTO   5B4
....................          delay_ms(1500); 
05BD:  MOVLW  06
05BE:  MOVWF  37
05BF:  MOVLW  FA
05C0:  MOVWF  44
05C1:  CALL   200
05C2:  DECFSZ 37,F
05C3:  GOTO   5BF
....................          lcd_putc("\fEstablece los pasos:"); 
05C4:  CLRF   37
05C5:  MOVF   37,W
05C6:  CALL   182
05C7:  IORLW  00
05C8:  BTFSC  03.2
05C9:  GOTO   5CE
05CA:  INCF   37,F
05CB:  MOVWF  43
05CC:  CALL   2A3
05CD:  GOTO   5C5
....................          pasos=teclado_numeros(2); 
05CE:  MOVLW  02
05CF:  MOVWF  37
05D0:  CALL   3C4
05D1:  MOVF   79,W
05D2:  MOVWF  2C
05D3:  MOVF   78,W
05D4:  MOVWF  2B
....................          lcd_gotoxy(2,3); 
05D5:  MOVLW  02
05D6:  MOVWF  44
05D7:  MOVLW  03
05D8:  MOVWF  45
05D9:  CALL   280
....................          lcd_putc("Establece la pausa"); 
05DA:  CLRF   37
05DB:  MOVF   37,W
05DC:  CALL   19C
05DD:  IORLW  00
05DE:  BTFSC  03.2
05DF:  GOTO   5E4
05E0:  INCF   37,F
05E1:  MOVWF  43
05E2:  CALL   2A3
05E3:  GOTO   5DB
....................          pausa=teclado_numeros(4); 
05E4:  MOVLW  04
05E5:  MOVWF  37
05E6:  CALL   3C4
05E7:  MOVF   79,W
05E8:  MOVWF  2A
05E9:  MOVF   78,W
05EA:  MOVWF  29
....................          if(pausa>1000) 
05EB:  MOVF   2A,W
05EC:  SUBLW  02
05ED:  BTFSC  03.0
05EE:  GOTO   5FB
05EF:  XORLW  FF
05F0:  BTFSS  03.2
05F1:  GOTO   5F6
05F2:  MOVF   29,W
05F3:  SUBLW  E8
05F4:  BTFSC  03.0
05F5:  GOTO   5FB
....................             pausa=1000; 
05F6:  MOVLW  03
05F7:  MOVWF  2A
05F8:  MOVLW  E8
05F9:  MOVWF  29
....................          else 
05FA:  GOTO   604
....................             if(pausa<1) 
05FB:  MOVF   29,F
05FC:  BTFSS  03.2
05FD:  GOTO   604
05FE:  MOVF   2A,F
05FF:  BTFSS  03.2
0600:  GOTO   604
....................                pausa=1; 
0601:  CLRF   2A
0602:  MOVLW  01
0603:  MOVWF  29
....................          delay_ms(1000); 
0604:  MOVLW  04
0605:  MOVWF  37
0606:  MOVLW  FA
0607:  MOVWF  44
0608:  CALL   200
0609:  DECFSZ 37,F
060A:  GOTO   606
....................          printf(lcd_putc,"\f Motor paso a paso\nPasos=0 de %Lu\nPausa= %Lu\nSentido",pasos,pausa); 
060B:  CLRF   37
060C:  MOVF   37,W
060D:  CALL   1B3
060E:  INCF   37,F
060F:  MOVWF  77
0610:  MOVWF  43
0611:  CALL   2A3
0612:  MOVLW  1F
0613:  SUBWF  37,W
0614:  BTFSS  03.2
0615:  GOTO   60C
0616:  MOVLW  10
0617:  MOVWF  04
0618:  MOVF   2C,W
0619:  MOVWF  3B
061A:  MOVF   2B,W
061B:  MOVWF  3A
061C:  CALL   34C
061D:  MOVLW  22
061E:  MOVWF  37
061F:  MOVF   37,W
0620:  CALL   1B3
0621:  INCF   37,F
0622:  MOVWF  77
0623:  MOVWF  43
0624:  CALL   2A3
0625:  MOVLW  2A
0626:  SUBWF  37,W
0627:  BTFSS  03.2
0628:  GOTO   61F
0629:  MOVLW  10
062A:  MOVWF  04
062B:  MOVF   2A,W
062C:  MOVWF  3B
062D:  MOVF   29,W
062E:  MOVWF  3A
062F:  CALL   34C
0630:  MOVLW  2D
0631:  MOVWF  37
0632:  MOVF   37,W
0633:  CALL   1B3
0634:  INCF   37,F
0635:  MOVWF  77
0636:  MOVWF  43
0637:  CALL   2A3
0638:  MOVLW  35
0639:  SUBWF  37,W
063A:  BTFSS  03.2
063B:  GOTO   632
....................          lcd_gotoxy(9,4); 
063C:  MOVLW  09
063D:  MOVWF  44
063E:  MOVLW  04
063F:  MOVWF  45
0640:  CALL   280
....................          if(modo==1) 
0641:  DECFSZ 27,W
0642:  GOTO   64E
....................             lcd_putc("izquierdo"); 
0643:  CLRF   37
0644:  MOVF   37,W
0645:  CALL   168
0646:  IORLW  00
0647:  BTFSC  03.2
0648:  GOTO   64D
0649:  INCF   37,F
064A:  MOVWF  43
064B:  CALL   2A3
064C:  GOTO   644
....................          else 
064D:  GOTO   658
....................             lcd_putc("derecho"); 
064E:  CLRF   37
064F:  MOVF   37,W
0650:  CALL   176
0651:  IORLW  00
0652:  BTFSC  03.2
0653:  GOTO   658
0654:  INCF   37,F
0655:  MOVWF  43
0656:  CALL   2A3
0657:  GOTO   64F
....................          aux=true; 
0658:  BSF    21.1
....................          for(pa=0;pa<pasos;pa++) 
0659:  CLRF   2E
065A:  CLRF   2D
065B:  MOVF   2E,W
065C:  SUBWF  2C,W
065D:  BTFSS  03.0
065E:  GOTO   6AF
065F:  BTFSS  03.2
0660:  GOTO   665
0661:  MOVF   2B,W
0662:  SUBWF  2D,W
0663:  BTFSC  03.0
0664:  GOTO   6AF
....................          { 
....................             lcd_gotoxy(7,2); 
0665:  MOVLW  07
0666:  MOVWF  44
0667:  MOVLW  02
0668:  MOVWF  45
0669:  CALL   280
....................             printf(lcd_putc,"%Lu de %Lu  ",pa,pasos); 
066A:  MOVLW  10
066B:  MOVWF  04
066C:  MOVF   2E,W
066D:  MOVWF  3B
066E:  MOVF   2D,W
066F:  MOVWF  3A
0670:  CALL   34C
0671:  MOVLW  03
0672:  MOVWF  37
0673:  MOVF   37,W
0674:  CALL   1ED
0675:  INCF   37,F
0676:  MOVWF  77
0677:  MOVWF  43
0678:  CALL   2A3
0679:  MOVLW  07
067A:  SUBWF  37,W
067B:  BTFSS  03.2
067C:  GOTO   673
067D:  MOVLW  10
067E:  MOVWF  04
067F:  MOVF   2C,W
0680:  MOVWF  3B
0681:  MOVF   2B,W
0682:  MOVWF  3A
0683:  CALL   34C
0684:  MOVLW  20
0685:  MOVWF  43
0686:  CALL   2A3
0687:  MOVLW  20
0688:  MOVWF  43
0689:  CALL   2A3
....................             if(modo==1) 
068A:  DECFSZ 27,W
068B:  GOTO   68F
....................                porta=1; 
068C:  MOVLW  01
068D:  MOVWF  05
....................             else 
068E:  GOTO   691
....................                porta=8; 
068F:  MOVLW  08
0690:  MOVWF  05
....................             for(i=0;i<4;i++) 
0691:  CLRF   25
0692:  MOVF   25,W
0693:  SUBLW  03
0694:  BTFSS  03.0
0695:  GOTO   6A9
....................             { 
....................                aux=pausa_tec(pausa); 
0696:  MOVF   2A,W
0697:  MOVWF  38
0698:  MOVF   29,W
0699:  MOVWF  37
069A:  CALL   443
069B:  BCF    21.1
069C:  BTFSC  78.0
069D:  BSF    21.1
....................                if(modo==1) 
069E:  DECFSZ 27,W
069F:  GOTO   6A3
....................                   porta*=2; 
06A0:  BCF    03.0
06A1:  RLF    05,F
....................                else 
06A2:  GOTO   6A5
....................                   porta/=2; 
06A3:  BCF    03.0
06A4:  RRF    05,F
....................                if(aux==false) 
06A5:  BTFSS  21.1
....................                break; 
06A6:  GOTO   6A9
....................             } 
06A7:  INCF   25,F
06A8:  GOTO   692
....................             if(aux==false) 
06A9:  BTFSS  21.1
....................                break; 
06AA:  GOTO   6AF
....................          } 
06AB:  INCF   2D,F
06AC:  BTFSC  03.2
06AD:  INCF   2E,F
06AE:  GOTO   65B
....................       } 
....................    } 
06AF:  GOTO   49D
.................... } 
.................... long teclado_numeros(int y) 
.................... { 
06B0:  SLEEP
....................    for(i=0;i<4;i++) 
*
03C4:  CLRF   25
03C5:  MOVF   25,W
03C6:  SUBLW  03
03C7:  BTFSS  03.0
03C8:  GOTO   40A
....................    { 
....................       do 
....................       { 
....................          tec=kbd_getc(); 
03C9:  CALL   2CB
03CA:  MOVF   78,W
03CB:  MOVWF  26
....................          if((tec=='*') | (tec=='#')) 
03CC:  MOVF   26,W
03CD:  SUBLW  2A
03CE:  BTFSC  03.2
03CF:  GOTO   3D2
03D0:  MOVLW  00
03D1:  GOTO   3D3
03D2:  MOVLW  01
03D3:  MOVWF  38
03D4:  MOVF   26,W
03D5:  SUBLW  23
03D6:  BTFSC  03.2
03D7:  GOTO   3DA
03D8:  MOVLW  00
03D9:  GOTO   3DB
03DA:  MOVLW  01
03DB:  IORWF  38,W
03DC:  BTFSS  03.2
....................             tec=0; 
03DD:  CLRF   26
....................       }while(!tec); 
03DE:  MOVF   26,F
03DF:  BTFSC  03.2
03E0:  GOTO   3C9
....................       numero[i]=tec-48; 
03E1:  BCF    03.0
03E2:  RLF    25,W
03E3:  ADDLW  2F
03E4:  MOVWF  04
03E5:  BCF    03.7
03E6:  MOVLW  30
03E7:  SUBWF  26,W
03E8:  INCF   04,F
03E9:  CLRF   00
03EA:  DECF   04,F
03EB:  MOVWF  00
....................       lcd_gotoxy(i+8,y); 
03EC:  MOVLW  08
03ED:  ADDWF  25,W
03EE:  MOVWF  38
03EF:  MOVWF  44
03F0:  MOVF   37,W
03F1:  MOVWF  45
03F2:  CALL   280
....................       printf(lcd_putc,"%Lu",numero[i]); 
03F3:  BCF    03.0
03F4:  RLF    25,W
03F5:  ADDLW  2F
03F6:  MOVWF  04
03F7:  BCF    03.7
03F8:  INCF   04,F
03F9:  MOVF   00,W
03FA:  MOVWF  39
03FB:  DECF   04,F
03FC:  MOVF   00,W
03FD:  MOVWF  38
03FE:  MOVLW  10
03FF:  MOVWF  04
0400:  MOVF   39,W
0401:  MOVWF  3B
0402:  MOVF   38,W
0403:  MOVWF  3A
0404:  CALL   34C
....................       delay_ms(150); 
0405:  MOVLW  96
0406:  MOVWF  44
0407:  CALL   200
....................    } 
0408:  INCF   25,F
0409:  GOTO   3C5
....................    return(numero[0]*1000+numero[1]*100+numero[2]*10+numero[3]); 
040A:  MOVF   30,W
040B:  MOVWF  3B
040C:  MOVF   2F,W
040D:  MOVWF  3A
040E:  MOVLW  03
040F:  MOVWF  3D
0410:  MOVLW  E8
0411:  MOVWF  3C
0412:  CALL   3AF
0413:  MOVF   79,W
0414:  MOVWF  39
0415:  MOVF   78,W
0416:  MOVWF  38
0417:  MOVF   32,W
0418:  MOVWF  3B
0419:  MOVF   31,W
041A:  MOVWF  3A
041B:  CLRF   3D
041C:  MOVLW  64
041D:  MOVWF  3C
041E:  CALL   3AF
041F:  MOVF   79,W
0420:  MOVWF  7A
0421:  MOVF   78,W
0422:  ADDWF  38,F
0423:  MOVF   79,W
0424:  BTFSC  03.0
0425:  INCFSZ 79,W
0426:  ADDWF  39,F
0427:  MOVF   34,W
0428:  MOVWF  3B
0429:  MOVF   33,W
042A:  MOVWF  3A
042B:  CLRF   3D
042C:  MOVLW  0A
042D:  MOVWF  3C
042E:  CALL   3AF
042F:  MOVF   79,W
0430:  MOVWF  7A
0431:  MOVF   78,W
0432:  ADDWF  38,F
0433:  MOVF   79,W
0434:  BTFSC  03.0
0435:  INCFSZ 79,W
0436:  ADDWF  39,F
0437:  MOVF   35,W
0438:  ADDWF  38,W
0439:  MOVWF  78
043A:  MOVF   39,W
043B:  MOVWF  7A
043C:  MOVF   36,W
043D:  BTFSC  03.0
043E:  INCFSZ 36,W
043F:  ADDWF  7A,F
0440:  MOVF   7A,W
0441:  MOVWF  79
.................... } 
0442:  RETURN
.................... short pausa_tec(long t) 
.................... { 
0443:  BSF    3B.0
....................    long tp; 
....................    short ind=true; 
....................    for(tp=0;tp<t;tp++) 
0444:  CLRF   3A
0445:  CLRF   39
0446:  MOVF   3A,W
0447:  SUBWF  38,W
0448:  BTFSS  03.0
0449:  GOTO   473
044A:  BTFSS  03.2
044B:  GOTO   450
044C:  MOVF   37,W
044D:  SUBWF  39,W
044E:  BTFSC  03.0
044F:  GOTO   473
....................    { 
....................       delay_us(950); 
0450:  MOVLW  05
0451:  MOVWF  3C
0452:  MOVLW  BB
0453:  MOVWF  3D
*
0467:  DECFSZ 3C,F
0468:  GOTO   452
....................       if (kbd_getc()!=0) 
0469:  CALL   2CB
046A:  MOVF   78,F
046B:  BTFSC  03.2
046C:  GOTO   46F
....................       { 
....................          ind=false; 
046D:  BCF    3B.0
....................          break; 
046E:  GOTO   473
....................       } 
....................    } 
046F:  INCF   39,F
0470:  BTFSC  03.2
0471:  INCF   3A,F
0472:  GOTO   446
....................    return (ind); 
0473:  MOVLW  00
0474:  BTFSC  3B.0
0475:  MOVLW  01
0476:  MOVWF  78
.................... } 
0477:  RETURN

Configuration Fuses:
   Word  1: 3F2A   NOWDT NOPUT HS MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
