CCS PCM C Compiler, Version 4.130, 59972               06-nov.-14 21:53

               Filename: C:\Users\Ivan-ua\Documents\PIC\Pic C\P10\lcd2.lst

               ROM used: 712 words (35%)
                         Largest free fragment is 1336
               RAM used: 11 (5%) at main() level
                         22 (10%) worst case
               Stack:    5 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   15D
0003:  NOP
.................... #include <16f628a.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  
.................... #fuses INTRC_IO 
.................... #fuses NOWDT 
.................... #fuses NOMCLR 
.................... #fuses NOPUT 
.................... #fuses NOLVP 
.................... #fuses NOPROTECT 
.................... #fuses NOCPD 
.................... #fuses NOBROWNOUT 
.................... #use delay(clock=4000000) 
*
003C:  MOVLW  28
003D:  MOVWF  04
003E:  BCF    03.7
003F:  MOVF   00,W
0040:  BTFSC  03.2
0041:  GOTO   050
0042:  MOVLW  01
0043:  MOVWF  78
0044:  CLRF   77
0045:  DECFSZ 77,F
0046:  GOTO   045
0047:  DECFSZ 78,F
0048:  GOTO   044
0049:  MOVLW  4A
004A:  MOVWF  77
004B:  DECFSZ 77,F
004C:  GOTO   04B
004D:  GOTO   04E
004E:  DECFSZ 00,F
004F:  GOTO   042
0050:  RETURN
.................... #BYTE TRISA=0x85 
.................... #BYTE PORTA=0x05 
.................... #BYTE TRISB=0x86 
.................... #BYTE PORTB=0x06 
.................... #define use_portb_lcd TRUE 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0069:  MOVLW  0F
006A:  BSF    03.5
006B:  ANDWF  06,W
006C:  IORLW  F0
006D:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
006E:  BCF    03.5
006F:  BSF    06.2
....................    delay_cycles(1); 
0070:  NOP
....................    lcd_output_enable(1); 
0071:  BSF    06.0
....................    delay_cycles(1); 
0072:  NOP
....................    high = lcd_read_nibble(); 
0073:  CALL   05D
0074:  MOVF   78,W
0075:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0076:  BCF    06.0
....................    delay_cycles(1); 
0077:  NOP
....................    lcd_output_enable(1); 
0078:  BSF    06.0
....................    delay_us(1); 
0079:  NOP
....................    low = lcd_read_nibble(); 
007A:  CALL   05D
007B:  MOVF   78,W
007C:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
007D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007E:  MOVLW  0F
007F:  BSF    03.5
0080:  ANDWF  06,W
0081:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0082:  BCF    03.5
0083:  SWAPF  2F,W
0084:  MOVWF  77
0085:  MOVLW  F0
0086:  ANDWF  77,F
0087:  MOVF   77,W
0088:  IORWF  2E,W
0089:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
005D:  MOVF   06,W
005E:  MOVWF  77
005F:  SWAPF  06,W
0060:  ANDLW  0F
0061:  MOVWF  78
....................   #endif 
.................... } 
0062:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0051:  SWAPF  2F,W
0052:  ANDLW  F0
0053:  MOVWF  77
0054:  MOVLW  0F
0055:  ANDWF  06,W
0056:  IORWF  77,W
0057:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0058:  NOP
....................    lcd_output_enable(1); 
0059:  BSF    06.0
....................    delay_us(2); 
005A:  GOTO   05B
....................    lcd_output_enable(0); 
005B:  BCF    06.0
.................... } 
005C:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0063:  BSF    03.5
0064:  BCF    06.0
....................    lcd_rs_tris(); 
0065:  BCF    06.1
....................    lcd_rw_tris(); 
0066:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0067:  BCF    03.5
0068:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
008A:  MOVF   78,W
008B:  MOVWF  2E
008C:  BTFSC  2E.7
008D:  GOTO   069
....................    lcd_output_rs(address); 
008E:  BTFSS  2C.0
008F:  BCF    06.1
0090:  BTFSC  2C.0
0091:  BSF    06.1
....................    delay_cycles(1); 
0092:  NOP
....................    lcd_output_rw(0); 
0093:  BCF    06.2
....................    delay_cycles(1); 
0094:  NOP
....................    lcd_output_enable(0); 
0095:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0096:  SWAPF  2D,W
0097:  MOVWF  2E
0098:  MOVLW  0F
0099:  ANDWF  2E,F
009A:  MOVF   2E,W
009B:  MOVWF  2F
009C:  CALL   051
....................    lcd_send_nibble(n & 0xf); 
009D:  MOVF   2D,W
009E:  ANDLW  0F
009F:  MOVWF  2E
00A0:  MOVWF  2F
00A1:  CALL   051
.................... } 
00A2:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A3:  MOVLW  0F
00A4:  BSF    03.5
00A5:  ANDWF  06,W
00A6:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00A7:  BCF    06.0
....................    lcd_rs_tris(); 
00A8:  BCF    06.1
....................    lcd_rw_tris(); 
00A9:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00AA:  BCF    03.5
00AB:  BCF    06.1
....................    lcd_output_rw(0); 
00AC:  BCF    06.2
....................    lcd_output_enable(0); 
00AD:  BCF    06.0
....................      
....................    delay_ms(15); 
00AE:  MOVLW  0F
00AF:  MOVWF  28
00B0:  CALL   03C
....................    for(i=1;i<=3;++i) 
00B1:  MOVLW  01
00B2:  MOVWF  25
00B3:  MOVF   25,W
00B4:  SUBLW  03
00B5:  BTFSS  03.0
00B6:  GOTO   0BF
....................    { 
....................        lcd_send_nibble(3); 
00B7:  MOVLW  03
00B8:  MOVWF  2F
00B9:  CALL   051
....................        delay_ms(5); 
00BA:  MOVLW  05
00BB:  MOVWF  28
00BC:  CALL   03C
....................    } 
00BD:  INCF   25,F
00BE:  GOTO   0B3
....................     
....................    lcd_send_nibble(2); 
00BF:  MOVLW  02
00C0:  MOVWF  2F
00C1:  CALL   051
....................    delay_ms(5); 
00C2:  MOVLW  05
00C3:  MOVWF  28
00C4:  CALL   03C
....................    for(i=0;i<=3;++i) 
00C5:  CLRF   25
00C6:  MOVF   25,W
00C7:  SUBLW  03
00C8:  BTFSS  03.0
00C9:  GOTO   0D3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00CA:  MOVF   25,W
00CB:  CALL   004
00CC:  MOVWF  26
00CD:  CLRF   2C
00CE:  MOVF   26,W
00CF:  MOVWF  2D
00D0:  CALL   063
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D1:  INCF   25,F
00D2:  GOTO   0C6
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
00D3:  GOTO   169 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
00D4:  DECFSZ 29,W
00D5:  GOTO   0D7
00D6:  GOTO   0DA
....................       address=LCD_LINE_TWO; 
00D7:  MOVLW  40
00D8:  MOVWF  2A
....................    else 
00D9:  GOTO   0DB
....................       address=0; 
00DA:  CLRF   2A
....................       
....................    address+=x-1; 
00DB:  MOVLW  01
00DC:  SUBWF  28,W
00DD:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
00DE:  MOVF   2A,W
00DF:  IORLW  80
00E0:  MOVWF  2B
00E1:  CLRF   2C
00E2:  MOVF   2B,W
00E3:  MOVWF  2D
00E4:  CALL   063
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
00E5:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
00E6:  MOVF   27,W
00E7:  XORLW  07
00E8:  BTFSC  03.2
00E9:  GOTO   0F4
00EA:  XORLW  0B
00EB:  BTFSC  03.2
00EC:  GOTO   0F9
00ED:  XORLW  06
00EE:  BTFSC  03.2
00EF:  GOTO   101
00F0:  XORLW  02
00F1:  BTFSC  03.2
00F2:  GOTO   107
00F3:  GOTO   10C
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F4:  MOVLW  01
00F5:  MOVWF  28
00F6:  MOVWF  29
00F7:  CALL   0D4
00F8:  GOTO   112
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F9:  CLRF   2C
00FA:  MOVLW  01
00FB:  MOVWF  2D
00FC:  CALL   063
....................                      delay_ms(2); 
00FD:  MOVLW  02
00FE:  MOVWF  28
00FF:  CALL   03C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0100:  GOTO   112
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0101:  MOVLW  01
0102:  MOVWF  28
0103:  MOVLW  02
0104:  MOVWF  29
0105:  CALL   0D4
0106:  GOTO   112
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0107:  CLRF   2C
0108:  MOVLW  10
0109:  MOVWF  2D
010A:  CALL   063
010B:  GOTO   112
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
010C:  MOVLW  01
010D:  MOVWF  2C
010E:  MOVF   27,W
010F:  MOVWF  2D
0110:  CALL   063
0111:  GOTO   112
....................      #endif 
....................    } 
.................... } 
0112:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... int numt=20,e1,e2,e3,e4; 
....................  
.................... void main() 
.................... { 
*
015D:  CLRF   04
015E:  BCF    03.7
015F:  MOVLW  1F
0160:  ANDWF  03,F
0161:  BSF    03.5
0162:  BSF    0E.3
0163:  MOVLW  14
0164:  BCF    03.5
0165:  MOVWF  20
0166:  MOVLW  07
0167:  MOVWF  1F
....................    lcd_init(); 
0168:  GOTO   0A3
....................    write_eeprom(0,150); 
0169:  BSF    03.5
016A:  CLRF   1B
016B:  MOVLW  96
016C:  MOVWF  1A
016D:  BCF    1C.7
016E:  BSF    1C.2
016F:  BCF    03.5
0170:  MOVF   0B,W
0171:  MOVWF  77
0172:  BCF    0B.7
0173:  BSF    03.5
0174:  MOVLW  55
0175:  MOVWF  1D
0176:  MOVLW  AA
0177:  MOVWF  1D
0178:  BSF    1C.1
0179:  BTFSC  1C.1
017A:  GOTO   179
017B:  BCF    1C.2
017C:  MOVF   77,W
017D:  BCF    03.5
017E:  IORWF  0B,F
....................    write_eeprom(1,1); 
017F:  MOVLW  01
0180:  BSF    03.5
0181:  MOVWF  1B
0182:  MOVWF  1A
0183:  BCF    1C.7
0184:  BSF    1C.2
0185:  BCF    03.5
0186:  MOVF   0B,W
0187:  MOVWF  77
0188:  BCF    0B.7
0189:  BSF    03.5
018A:  MOVLW  55
018B:  MOVWF  1D
018C:  MOVLW  AA
018D:  MOVWF  1D
018E:  BSF    1C.1
018F:  BTFSC  1C.1
0190:  GOTO   18F
0191:  BCF    1C.2
0192:  MOVF   77,W
0193:  BCF    03.5
0194:  IORWF  0B,F
....................    write_eeprom(2,9); 
0195:  MOVLW  02
0196:  BSF    03.5
0197:  MOVWF  1B
0198:  MOVLW  09
0199:  MOVWF  1A
019A:  BCF    1C.7
019B:  BSF    1C.2
019C:  BCF    03.5
019D:  MOVF   0B,W
019E:  MOVWF  77
019F:  BCF    0B.7
01A0:  BSF    03.5
01A1:  MOVLW  55
01A2:  MOVWF  1D
01A3:  MOVLW  AA
01A4:  MOVWF  1D
01A5:  BSF    1C.1
01A6:  BTFSC  1C.1
01A7:  GOTO   1A6
01A8:  BCF    1C.2
01A9:  MOVF   77,W
01AA:  BCF    03.5
01AB:  IORWF  0B,F
....................    write_eeprom(3,2); 
01AC:  MOVLW  03
01AD:  BSF    03.5
01AE:  MOVWF  1B
01AF:  MOVLW  02
01B0:  MOVWF  1A
01B1:  BCF    1C.7
01B2:  BSF    1C.2
01B3:  BCF    03.5
01B4:  MOVF   0B,W
01B5:  MOVWF  77
01B6:  BCF    0B.7
01B7:  BSF    03.5
01B8:  MOVLW  55
01B9:  MOVWF  1D
01BA:  MOVLW  AA
01BB:  MOVWF  1D
01BC:  BSF    1C.1
01BD:  BTFSC  1C.1
01BE:  GOTO   1BD
01BF:  BCF    1C.2
01C0:  MOVF   77,W
01C1:  BCF    03.5
01C2:  IORWF  0B,F
....................    Trisa=0b11110000; 
01C3:  MOVLW  F0
01C4:  BSF    03.5
01C5:  MOVWF  05
....................    Trisb=0; 
01C6:  CLRF   06
....................    portb=0; 
01C7:  BCF    03.5
01C8:  CLRF   06
....................    e1=read_eeprom(50); 
01C9:  MOVLW  32
01CA:  BSF    03.5
01CB:  MOVWF  1B
01CC:  BCF    1C.7
01CD:  BSF    1C.0
01CE:  MOVF   1A,W
01CF:  BCF    03.5
01D0:  MOVWF  21
....................    e2=read_eeprom(1); 
01D1:  MOVLW  01
01D2:  BSF    03.5
01D3:  MOVWF  1B
01D4:  BCF    1C.7
01D5:  BSF    1C.0
01D6:  MOVF   1A,W
01D7:  BCF    03.5
01D8:  MOVWF  22
....................    e3=read_eeprom(2); 
01D9:  MOVLW  02
01DA:  BSF    03.5
01DB:  MOVWF  1B
01DC:  BCF    1C.7
01DD:  BSF    1C.0
01DE:  MOVF   1A,W
01DF:  BCF    03.5
01E0:  MOVWF  23
....................    e4=read_eeprom(3); 
01E1:  MOVLW  03
01E2:  BSF    03.5
01E3:  MOVWF  1B
01E4:  BCF    1C.7
01E5:  BSF    1C.0
01E6:  MOVF   1A,W
01E7:  BCF    03.5
01E8:  MOVWF  24
....................    lcd_putc("\f"); 
01E9:  CLRF   25
01EA:  MOVF   25,W
01EB:  CALL   00C
01EC:  IORLW  00
01ED:  BTFSC  03.2
01EE:  GOTO   1F3
01EF:  INCF   25,F
01F0:  MOVWF  27
01F1:  CALL   0E6
01F2:  GOTO   1EA
....................    lcd_gotoxy(2,1); 
01F3:  MOVLW  02
01F4:  MOVWF  28
01F5:  MOVLW  01
01F6:  MOVWF  29
01F7:  CALL   0D4
....................    printf(lcd_putc,"Password:"); 
01F8:  CLRF   25
01F9:  MOVF   25,W
01FA:  CALL   012
01FB:  INCF   25,F
01FC:  MOVWF  77
01FD:  MOVWF  27
01FE:  CALL   0E6
01FF:  MOVLW  09
0200:  SUBWF  25,W
0201:  BTFSS  03.2
0202:  GOTO   1F9
....................    lcd_gotoxy(1,2); 
0203:  MOVLW  01
0204:  MOVWF  28
0205:  MOVLW  02
0206:  MOVWF  29
0207:  CALL   0D4
....................    printf(lcd_putc,"EEPROM %u",e1); 
0208:  CLRF   25
0209:  MOVF   25,W
020A:  CALL   020
020B:  INCF   25,F
020C:  MOVWF  77
020D:  MOVWF  27
020E:  CALL   0E6
020F:  MOVLW  07
0210:  SUBWF  25,W
0211:  BTFSS  03.2
0212:  GOTO   209
0213:  MOVF   21,W
0214:  MOVWF  25
0215:  MOVLW  1B
0216:  MOVWF  26
0217:  CALL   128
....................    delay_ms(1000); 
0218:  MOVLW  04
0219:  MOVWF  25
021A:  MOVLW  FA
021B:  MOVWF  28
021C:  CALL   03C
021D:  DECFSZ 25,F
021E:  GOTO   21A
....................    while(true) 
....................    { 
....................       numt=20; 
021F:  MOVLW  14
0220:  MOVWF  20
....................       Porta=1; 
0221:  MOVLW  01
0222:  MOVWF  05
....................       if(input(pin_a4)==1){numt=1;} 
0223:  BSF    03.5
0224:  BSF    05.4
0225:  BCF    03.5
0226:  BTFSS  05.4
0227:  GOTO   22A
0228:  MOVLW  01
0229:  MOVWF  20
....................       if(input(pin_a5)==1){numt=2;} 
022A:  BSF    03.5
022B:  BSF    05.5
022C:  BCF    03.5
022D:  BTFSS  05.5
022E:  GOTO   231
022F:  MOVLW  02
0230:  MOVWF  20
....................       if(input(PIN_A6)==1){numt=3;} 
0231:  BSF    03.5
0232:  BSF    05.6
0233:  BCF    03.5
0234:  BTFSS  05.6
0235:  GOTO   238
0236:  MOVLW  03
0237:  MOVWF  20
....................       if(input(pin_a7)==1){numt=10;} 
0238:  BSF    03.5
0239:  BSF    05.7
023A:  BCF    03.5
023B:  BTFSS  05.7
023C:  GOTO   23F
023D:  MOVLW  0A
023E:  MOVWF  20
....................       Porta=2; 
023F:  MOVLW  02
0240:  MOVWF  05
....................       if(input(pin_a4)==1){numt=4;} 
0241:  BSF    03.5
0242:  BSF    05.4
0243:  BCF    03.5
0244:  BTFSS  05.4
0245:  GOTO   248
0246:  MOVLW  04
0247:  MOVWF  20
....................       if(input(pin_a5)==1){numt=5;} 
0248:  BSF    03.5
0249:  BSF    05.5
024A:  BCF    03.5
024B:  BTFSS  05.5
024C:  GOTO   24F
024D:  MOVLW  05
024E:  MOVWF  20
....................       if(input(PIN_A6)==1){numt=6;} 
024F:  BSF    03.5
0250:  BSF    05.6
0251:  BCF    03.5
0252:  BTFSS  05.6
0253:  GOTO   256
0254:  MOVLW  06
0255:  MOVWF  20
....................       if(input(pin_a7)==1){numt=11;} 
0256:  BSF    03.5
0257:  BSF    05.7
0258:  BCF    03.5
0259:  BTFSS  05.7
025A:  GOTO   25D
025B:  MOVLW  0B
025C:  MOVWF  20
....................       Porta=4; 
025D:  MOVLW  04
025E:  MOVWF  05
....................       if(input(pin_a4)==1){numt=7;} 
025F:  BSF    03.5
0260:  BSF    05.4
0261:  BCF    03.5
0262:  BTFSS  05.4
0263:  GOTO   266
0264:  MOVLW  07
0265:  MOVWF  20
....................       if(input(pin_a5)==1){numt=8;} 
0266:  BSF    03.5
0267:  BSF    05.5
0268:  BCF    03.5
0269:  BTFSS  05.5
026A:  GOTO   26D
026B:  MOVLW  08
026C:  MOVWF  20
....................       if(input(PIN_A6)==1){numt=9;} 
026D:  BSF    03.5
026E:  BSF    05.6
026F:  BCF    03.5
0270:  BTFSS  05.6
0271:  GOTO   274
0272:  MOVLW  09
0273:  MOVWF  20
....................       if(input(pin_a7)==1){numt=12;} 
0274:  BSF    03.5
0275:  BSF    05.7
0276:  BCF    03.5
0277:  BTFSS  05.7
0278:  GOTO   27B
0279:  MOVLW  0C
027A:  MOVWF  20
....................       Porta=8; 
027B:  MOVLW  08
027C:  MOVWF  05
....................       if(input(pin_a4)==1){numt=14;} 
027D:  BSF    03.5
027E:  BSF    05.4
027F:  BCF    03.5
0280:  BTFSS  05.4
0281:  GOTO   284
0282:  MOVLW  0E
0283:  MOVWF  20
....................       if(input(pin_a5)==1){numt=0;} 
0284:  BSF    03.5
0285:  BSF    05.5
0286:  BCF    03.5
0287:  BTFSC  05.5
0288:  CLRF   20
....................       if(input(PIN_A6)==1){numt=15;} 
0289:  BSF    03.5
028A:  BSF    05.6
028B:  BCF    03.5
028C:  BTFSS  05.6
028D:  GOTO   290
028E:  MOVLW  0F
028F:  MOVWF  20
....................       if(input(pin_a7)==1){numt=13;} 
0290:  BSF    03.5
0291:  BSF    05.7
0292:  BCF    03.5
0293:  BTFSS  05.7
0294:  GOTO   297
0295:  MOVLW  0D
0296:  MOVWF  20
....................    if(numt<16) 
0297:  MOVF   20,W
0298:  SUBLW  0F
0299:  BTFSS  03.0
029A:  GOTO   2C6
....................    { 
....................       delay_ms(250); 
029B:  MOVLW  FA
029C:  MOVWF  28
029D:  CALL   03C
....................       if(numt>=11){Portb=8;} 
029E:  MOVF   20,W
029F:  SUBLW  0A
02A0:  BTFSC  03.0
02A1:  GOTO   2A4
02A2:  MOVLW  08
02A3:  MOVWF  06
....................       if(numt<11){Portb=0;} 
02A4:  MOVF   20,W
02A5:  SUBLW  0A
02A6:  BTFSC  03.0
02A7:  CLRF   06
....................       lcd_putc("\f"); 
02A8:  CLRF   25
02A9:  MOVF   25,W
02AA:  CALL   00C
02AB:  IORLW  00
02AC:  BTFSC  03.2
02AD:  GOTO   2B2
02AE:  INCF   25,F
02AF:  MOVWF  27
02B0:  CALL   0E6
02B1:  GOTO   2A9
....................       lcd_gotoxy(1,1); 
02B2:  MOVLW  01
02B3:  MOVWF  28
02B4:  MOVWF  29
02B5:  CALL   0D4
....................       printf(lcd_putc,"Numero:%u",numt); 
02B6:  CLRF   25
02B7:  MOVF   25,W
02B8:  CALL   02E
02B9:  INCF   25,F
02BA:  MOVWF  77
02BB:  MOVWF  27
02BC:  CALL   0E6
02BD:  MOVLW  07
02BE:  SUBWF  25,W
02BF:  BTFSS  03.2
02C0:  GOTO   2B7
02C1:  MOVF   20,W
02C2:  MOVWF  25
02C3:  MOVLW  1B
02C4:  MOVWF  26
02C5:  CALL   128
....................    } 
....................    } 
02C6:  GOTO   21F
.................... } 
....................  
02C7:  SLEEP

Configuration Fuses:
   Word  1: 3F18   NOWDT NOPUT INTRC_IO NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
